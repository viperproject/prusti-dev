Analyzing file $DIR/calls.rs using DefinitelyInitializedAnalysis...
Result for function main():
{
  "bb0": [
    [
      [
        "state:",
        [],
        "statement: StorageLive(_1)"
      ]
    ],
    "state before terminator:",
    [],
    "terminator: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]",
    {
      "bb1": [
        "state:",
        [
          "_1"
        ]
      ],
      "bb5": [
        "state:",
        []
      ]
    }
  ],
  "bb1": [
    [
      [
        "state:",
        [
          "_1"
        ],
        "statement: FakeRead(ForLet(None), _1)"
      ],
      [
        "state:",
        [
          "_1"
        ],
        "statement: StorageLive(_2)"
      ]
    ],
    "state before terminator:",
    [
      "_1"
    ],
    "terminator: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]",
    {
      "bb2": [
        "state:",
        [
          "_1",
          "_2"
        ]
      ],
      "bb5": [
        "state:",
        []
      ]
    }
  ],
  "bb2": [
    [
      [
        "state:",
        [
          "_1",
          "_2"
        ],
        "statement: FakeRead(ForLet(None), _2)"
      ],
      [
        "state:",
        [
          "_1",
          "_2"
        ],
        "statement: StorageLive(_3)"
      ],
      [
        "state:",
        [
          "_1",
          "_2"
        ],
        "statement: StorageLive(_4)"
      ],
      [
        "state:",
        [
          "_1",
          "_2"
        ],
        "statement: _4 = _1"
      ],
      [
        "state:",
        [
          "_1",
          "_2",
          "_4"
        ],
        "statement: StorageLive(_5)"
      ],
      [
        "state:",
        [
          "_1",
          "_2",
          "_4"
        ],
        "statement: _5 = _2"
      ],
      [
        "state:",
        [
          "_1",
          "_2",
          "_4",
          "_5"
        ],
        "statement: _6 = CheckedAdd(_4, _5)"
      ]
    ],
    "state before terminator:",
    [
      "_1",
      "_2",
      "_4",
      "_5",
      "_6"
    ],
    "terminator: assert(!move (_6.1: bool), /"attempt to compute `{} + {}`, which would overflow/", move _4, move _5) -> [success: bb3, unwind: bb5]",
    {
      "bb3": [
        "state:",
        [
          "_1",
          "_2",
          "_4",
          "_5",
          "(_6.0: i32)"
        ]
      ],
      "bb5": [
        "state:",
        []
      ]
    }
  ],
  "bb3": [
    [
      [
        "state:",
        [
          "_1",
          "_2",
          "_4",
          "_5",
          "(_6.0: i32)"
        ],
        "statement: _3 = move (_6.0: i32)"
      ],
      [
        "state:",
        [
          "_1",
          "_2",
          "_3",
          "_4",
          "_5"
        ],
        "statement: StorageDead(_5)"
      ],
      [
        "state:",
        [
          "_1",
          "_2",
          "_3",
          "_4",
          "_5"
        ],
        "statement: StorageDead(_4)"
      ],
      [
        "state:",
        [
          "_1",
          "_2",
          "_3",
          "_4",
          "_5"
        ],
        "statement: FakeRead(ForLet(None), _3)"
      ],
      [
        "state:",
        [
          "_1",
          "_2",
          "_3",
          "_4",
          "_5"
        ],
        "statement: StorageLive(_7)"
      ],
      [
        "state:",
        [
          "_1",
          "_2",
          "_3",
          "_4",
          "_5"
        ],
        "statement: StorageLive(_8)"
      ],
      [
        "state:",
        [
          "_1",
          "_2",
          "_3",
          "_4",
          "_5"
        ],
        "statement: _8 = _3"
      ]
    ],
    "state before terminator:",
    [
      "_1",
      "_2",
      "_3",
      "_4",
      "_5",
      "_8"
    ],
    "terminator: _7 = f(move _8) -> [return: bb4, unwind: bb5]",
    {
      "bb4": [
        "state:",
        [
          "_1",
          "_2",
          "_3",
          "_4",
          "_5",
          "_7"
        ]
      ],
      "bb5": [
        "state:",
        []
      ]
    }
  ],
  "bb4": [
    [
      [
        "state:",
        [
          "_1",
          "_2",
          "_3",
          "_4",
          "_5",
          "_7"
        ],
        "statement: StorageDead(_8)"
      ],
      [
        "state:",
        [
          "_1",
          "_2",
          "_3",
          "_4",
          "_5",
          "_7"
        ],
        "statement: FakeRead(ForLet(None), _7)"
      ],
      [
        "state:",
        [
          "_1",
          "_2",
          "_3",
          "_4",
          "_5",
          "_7"
        ],
        "statement: _0 = const ()"
      ],
      [
        "state:",
        [
          "_0",
          "_1",
          "_2",
          "_3",
          "_4",
          "_5",
          "_7"
        ],
        "statement: StorageDead(_7)"
      ],
      [
        "state:",
        [
          "_0",
          "_1",
          "_2",
          "_3",
          "_4",
          "_5",
          "_7"
        ],
        "statement: StorageDead(_3)"
      ],
      [
        "state:",
        [
          "_0",
          "_1",
          "_2",
          "_3",
          "_4",
          "_5",
          "_7"
        ],
        "statement: StorageDead(_2)"
      ],
      [
        "state:",
        [
          "_0",
          "_1",
          "_2",
          "_3",
          "_4",
          "_5",
          "_7"
        ],
        "statement: StorageDead(_1)"
      ]
    ],
    "state before terminator:",
    [
      "_0",
      "_1",
      "_2",
      "_3",
      "_4",
      "_5",
      "_7"
    ],
    "terminator: return",
    {}
  ],
  "bb5": [
    [],
    "state before terminator:",
    [],
    "terminator: resume",
    {}
  ]
}