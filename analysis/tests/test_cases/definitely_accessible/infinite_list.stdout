Analyzing file $DIR/infinite_list.rs using DefinitelyAccessibleAnalysis...
Result for function test1():
{
  "bb0": [
    [
      [
        "state:",
        {
          "accessible": [
            "_1"
          ],
          "owned": [
            "_1"
          ]
        },
        "statement: StorageLive(_2)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1"
          ],
          "owned": [
            "_1"
          ]
        },
        "statement: _2 = move (*(_1.1: std::boxed::Box<InfiniteList>))"
      ],
      [
        "state:",
        {
          "accessible": [
            "(_1.0: u32)",
            "_2"
          ],
          "owned": [
            "(_1.0: u32)",
            "_2"
          ]
        },
        "statement: FakeRead(ForLet(None), _2)"
      ],
      [
        "state:",
        {
          "accessible": [
            "(_1.0: u32)",
            "_2"
          ],
          "owned": [
            "(_1.0: u32)",
            "_2"
          ]
        },
        "statement: _0 = const ()"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [
        "_0",
        "(_1.0: u32)",
        "_2"
      ],
      "owned": [
        "_0",
        "(_1.0: u32)",
        "_2"
      ]
    },
    "terminator: drop(_2) -> [return: bb1, unwind: bb3]",
    {
      "bb1": [
        "state:",
        {
          "accessible": [
            "_0",
            "(_1.0: u32)"
          ],
          "owned": [
            "_0",
            "(_1.0: u32)"
          ]
        }
      ],
      "bb3": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ]
    }
  ],
  "bb1": [
    [
      [
        "state:",
        {
          "accessible": [
            "_0",
            "(_1.0: u32)"
          ],
          "owned": [
            "_0",
            "(_1.0: u32)"
          ]
        },
        "statement: StorageDead(_2)"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [
        "_0",
        "(_1.0: u32)"
      ],
      "owned": [
        "_0",
        "(_1.0: u32)"
      ]
    },
    "terminator: drop(_1) -> [return: bb2, unwind: bb4]",
    {
      "bb2": [
        "state:",
        {
          "accessible": [
            "_0"
          ],
          "owned": [
            "_0"
          ]
        }
      ],
      "bb4": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ]
    }
  ],
  "bb2": [
    [],
    "state before terminator:",
    {
      "accessible": [
        "_0"
      ],
      "owned": [
        "_0"
      ]
    },
    "terminator: return",
    {}
  ],
  "bb3": [
    [],
    "state before terminator:",
    {
      "accessible": [],
      "owned": []
    },
    "terminator: drop(_1) -> [return: bb4, unwind terminate]",
    {
      "bb4": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ]
    }
  ],
  "bb4": [
    [],
    "state before terminator:",
    {
      "accessible": [],
      "owned": []
    },
    "terminator: resume",
    {}
  ]
}
Result for function test2():
{
  "bb0": [
    [
      [
        "state:",
        {
          "accessible": [
            "_1"
          ],
          "owned": [
            "_1"
          ]
        },
        "statement: StorageLive(_2)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1"
          ],
          "owned": [
            "_1"
          ]
        },
        "statement: _2 = move (*((*(_1.1: std::boxed::Box<InfiniteList>)).1: std::boxed::Box<InfiniteList>))"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [
        "(_1.0: u32)",
        "((*(_1.1: std::boxed::Box<InfiniteList>)).0: u32)",
        "_2"
      ],
      "owned": [
        "(_1.0: u32)",
        "((*(_1.1: std::boxed::Box<InfiniteList>)).0: u32)",
        "_2"
      ]
    },
    "terminator: drop(_1) -> [return: bb1, unwind: bb2]",
    {
      "bb1": [
        "state:",
        {
          "accessible": [
            "_2"
          ],
          "owned": [
            "_2"
          ]
        }
      ],
      "bb2": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ]
    }
  ],
  "bb1": [
    [
      [
        "state:",
        {
          "accessible": [
            "_2"
          ],
          "owned": [
            "_2"
          ]
        },
        "statement: _1 = move _2"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [
        "_1"
      ],
      "owned": [
        "_1"
      ]
    },
    "terminator: drop(_2) -> [return: bb3, unwind: bb5]",
    {
      "bb3": [
        "state:",
        {
          "accessible": [
            "_1"
          ],
          "owned": [
            "_1"
          ]
        }
      ],
      "bb5": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ]
    }
  ],
  "bb2": [
    [
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: _1 = move _2"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [
        "_1"
      ],
      "owned": [
        "_1"
      ]
    },
    "terminator: drop(_2) -> [return: bb5, unwind terminate]",
    {
      "bb5": [
        "state:",
        {
          "accessible": [
            "_1"
          ],
          "owned": [
            "_1"
          ]
        }
      ]
    }
  ],
  "bb3": [
    [
      [
        "state:",
        {
          "accessible": [
            "_1"
          ],
          "owned": [
            "_1"
          ]
        },
        "statement: StorageDead(_2)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1"
          ],
          "owned": [
            "_1"
          ]
        },
        "statement: _0 = const ()"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [
        "_0",
        "_1"
      ],
      "owned": [
        "_0",
        "_1"
      ]
    },
    "terminator: drop(_1) -> [return: bb4, unwind: bb6]",
    {
      "bb4": [
        "state:",
        {
          "accessible": [
            "_0"
          ],
          "owned": [
            "_0"
          ]
        }
      ],
      "bb6": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ]
    }
  ],
  "bb4": [
    [],
    "state before terminator:",
    {
      "accessible": [
        "_0"
      ],
      "owned": [
        "_0"
      ]
    },
    "terminator: return",
    {}
  ],
  "bb5": [
    [],
    "state before terminator:",
    {
      "accessible": [],
      "owned": []
    },
    "terminator: drop(_1) -> [return: bb6, unwind terminate]",
    {
      "bb6": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ]
    }
  ],
  "bb6": [
    [],
    "state before terminator:",
    {
      "accessible": [],
      "owned": []
    },
    "terminator: resume",
    {}
  ]
}
