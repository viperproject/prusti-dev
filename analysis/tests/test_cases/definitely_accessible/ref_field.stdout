Analyzing file $DIR/ref_field.rs using DefinitelyAccessibleAnalysis...
Result for function main():
{
  "bb0": [
    [
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageLive(_1)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: StorageLive(_2)"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [],
      "owned": []
    },
    "terminator: _2 = std::boxed::Box::<i32>::new(const 123_i32) -> [return: bb1, unwind: bb12]",
    {
      "bb1": [
        "state:",
        {
          "accessible": [
            "_2"
          ],
          "owned": [
            "_2"
          ]
        }
      ],
      "bb12": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ]
    }
  ],
  "bb1": [
    [
      [
        "state:",
        {
          "accessible": [
            "_2"
          ],
          "owned": [
            "_2"
          ]
        },
        "statement: StorageLive(_3)"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [
        "_2"
      ],
      "owned": [
        "_2"
      ]
    },
    "terminator: _3 = std::boxed::Box::<i32>::new(const 123_i32) -> [return: bb2, unwind: bb11]",
    {
      "bb11": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ],
      "bb2": [
        "state:",
        {
          "accessible": [
            "_2",
            "_3"
          ],
          "owned": [
            "_2",
            "_3"
          ]
        }
      ]
    }
  ],
  "bb2": [
    [
      [
        "state:",
        {
          "accessible": [
            "_2",
            "_3"
          ],
          "owned": [
            "_2",
            "_3"
          ]
        },
        "statement: _1 = (move _2, move _3)"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [
        "_1"
      ],
      "owned": [
        "_1"
      ]
    },
    "terminator: drop(_3) -> [return: bb3, unwind: bb11]",
    {
      "bb11": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ],
      "bb3": [
        "state:",
        {
          "accessible": [
            "_1"
          ],
          "owned": [
            "_1"
          ]
        }
      ]
    }
  ],
  "bb3": [
    [
      [
        "state:",
        {
          "accessible": [
            "_1"
          ],
          "owned": [
            "_1"
          ]
        },
        "statement: StorageDead(_3)"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [
        "_1"
      ],
      "owned": [
        "_1"
      ]
    },
    "terminator: drop(_2) -> [return: bb4, unwind: bb12]",
    {
      "bb12": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ],
      "bb4": [
        "state:",
        {
          "accessible": [
            "_1"
          ],
          "owned": [
            "_1"
          ]
        }
      ]
    }
  ],
  "bb4": [
    [
      [
        "state:",
        {
          "accessible": [
            "_1"
          ],
          "owned": [
            "_1"
          ]
        },
        "statement: StorageDead(_2)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1"
          ],
          "owned": [
            "_1"
          ]
        },
        "statement: FakeRead(ForLet(None), _1)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1"
          ],
          "owned": [
            "_1"
          ]
        },
        "statement: StorageLive(_4)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1"
          ],
          "owned": [
            "_1"
          ]
        },
        "statement: _4 = &(_1.0: std::boxed::Box<i32>)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_4"
          ],
          "owned": [
            "(_1.1: std::boxed::Box<i32>)",
            "_4"
          ]
        },
        "statement: FakeRead(ForLet(None), _4)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_4"
          ],
          "owned": [
            "(_1.1: std::boxed::Box<i32>)",
            "_4"
          ]
        },
        "statement: StorageLive(_5)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_4"
          ],
          "owned": [
            "(_1.1: std::boxed::Box<i32>)",
            "_4"
          ]
        },
        "statement: StorageLive(_6)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_4"
          ],
          "owned": [
            "(_1.1: std::boxed::Box<i32>)",
            "_4"
          ]
        },
        "statement: _6 = _4"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_4",
            "_6"
          ],
          "owned": [
            "(_1.1: std::boxed::Box<i32>)",
            "_4",
            "_6"
          ]
        },
        "statement: StorageLive(_7)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_4",
            "_6"
          ],
          "owned": [
            "(_1.1: std::boxed::Box<i32>)",
            "_4",
            "_6"
          ]
        },
        "statement: _7 = _4"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_4",
            "_6",
            "_7"
          ],
          "owned": [
            "(_1.1: std::boxed::Box<i32>)",
            "_4",
            "_6",
            "_7"
          ]
        },
        "statement: StorageLive(_8)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_4",
            "_6",
            "_7"
          ],
          "owned": [
            "(_1.1: std::boxed::Box<i32>)",
            "_4",
            "_6",
            "_7"
          ]
        },
        "statement: _8 = _4"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_6",
            "_7",
            "_8"
          ],
          "owned": [
            "(_1.1: std::boxed::Box<i32>)",
            "_6",
            "_7",
            "_8"
          ]
        },
        "statement: _5 = (move _6, move _7, move _8)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5"
          ],
          "owned": [
            "(_1.1: std::boxed::Box<i32>)",
            "_5"
          ]
        },
        "statement: StorageDead(_8)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5"
          ],
          "owned": [
            "(_1.1: std::boxed::Box<i32>)",
            "_5"
          ]
        },
        "statement: StorageDead(_7)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5"
          ],
          "owned": [
            "(_1.1: std::boxed::Box<i32>)",
            "_5"
          ]
        },
        "statement: StorageDead(_6)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5"
          ],
          "owned": [
            "(_1.1: std::boxed::Box<i32>)",
            "_5"
          ]
        },
        "statement: FakeRead(ForLet(None), _5)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5"
          ],
          "owned": [
            "(_1.1: std::boxed::Box<i32>)",
            "_5"
          ]
        },
        "statement: StorageLive(_9)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5"
          ],
          "owned": [
            "(_1.1: std::boxed::Box<i32>)",
            "_5"
          ]
        },
        "statement: StorageLive(_10)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5"
          ],
          "owned": [
            "(_1.1: std::boxed::Box<i32>)",
            "_5"
          ]
        },
        "statement: _10 = &(_1.1: std::boxed::Box<i32>)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5",
            "_10"
          ],
          "owned": [
            "_5",
            "_10"
          ]
        },
        "statement: _9 = &(*_10)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5",
            "_9"
          ],
          "owned": [
            "_5",
            "_9"
          ]
        },
        "statement: (_5.2: &std::boxed::Box<i32>) = move _9"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5"
          ],
          "owned": [
            "_5"
          ]
        },
        "statement: StorageDead(_9)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5"
          ],
          "owned": [
            "_5"
          ]
        },
        "statement: StorageDead(_10)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5"
          ],
          "owned": [
            "_5"
          ]
        },
        "statement: StorageLive(_11)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5"
          ],
          "owned": [
            "_5"
          ]
        },
        "statement: StorageLive(_12)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5"
          ],
          "owned": [
            "_5"
          ]
        },
        "statement: _12 = &_5"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [
        "_1",
        "_5",
        "_12"
      ],
      "owned": [
        "_12"
      ]
    },
    "terminator: _11 = foo::<&(&std::boxed::Box<i32>, &std::boxed::Box<i32>, &std::boxed::Box<i32>)>(move _12) -> [return: bb5, unwind: bb10]",
    {
      "bb10": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ],
      "bb5": [
        "state:",
        {
          "accessible": [
            "_1",
            "_5",
            "_11"
          ],
          "owned": [
            "_5",
            "_11"
          ]
        }
      ]
    }
  ],
  "bb5": [
    [
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5",
            "_11"
          ],
          "owned": [
            "_5",
            "_11"
          ]
        },
        "statement: StorageDead(_12)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5",
            "_11"
          ],
          "owned": [
            "_5",
            "_11"
          ]
        },
        "statement: StorageDead(_11)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5"
          ],
          "owned": [
            "_5"
          ]
        },
        "statement: StorageLive(_13)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5"
          ],
          "owned": [
            "_5"
          ]
        },
        "statement: StorageLive(_14)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_5"
          ],
          "owned": [
            "_5"
          ]
        },
        "statement: _14 = &_5"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [
        "_1",
        "_14"
      ],
      "owned": [
        "_14"
      ]
    },
    "terminator: _13 = foo::<&(&std::boxed::Box<i32>, &std::boxed::Box<i32>, &std::boxed::Box<i32>)>(move _14) -> [return: bb6, unwind: bb10]",
    {
      "bb10": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ],
      "bb6": [
        "state:",
        {
          "accessible": [
            "_1",
            "_13"
          ],
          "owned": [
            "_1",
            "_13"
          ]
        }
      ]
    }
  ],
  "bb6": [
    [
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_13"
          ],
          "owned": [
            "_1",
            "_13"
          ]
        },
        "statement: StorageDead(_14)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1",
            "_13"
          ],
          "owned": [
            "_1",
            "_13"
          ]
        },
        "statement: StorageDead(_13)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1"
          ],
          "owned": [
            "_1"
          ]
        },
        "statement: StorageLive(_15)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1"
          ],
          "owned": [
            "_1"
          ]
        },
        "statement: StorageLive(_16)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_1"
          ],
          "owned": [
            "_1"
          ]
        },
        "statement: _16 = move _1"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [
        "_16"
      ],
      "owned": [
        "_16"
      ]
    },
    "terminator: _15 = std::mem::drop::<(std::boxed::Box<i32>, std::boxed::Box<i32>)>(move _16) -> [return: bb7, unwind: bb9]",
    {
      "bb7": [
        "state:",
        {
          "accessible": [
            "_15"
          ],
          "owned": [
            "_15"
          ]
        }
      ],
      "bb9": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ]
    }
  ],
  "bb7": [
    [
      [
        "state:",
        {
          "accessible": [
            "_15"
          ],
          "owned": [
            "_15"
          ]
        },
        "statement: StorageDead(_16)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_15"
          ],
          "owned": [
            "_15"
          ]
        },
        "statement: StorageDead(_15)"
      ],
      [
        "state:",
        {
          "accessible": [],
          "owned": []
        },
        "statement: _0 = const ()"
      ],
      [
        "state:",
        {
          "accessible": [
            "_0"
          ],
          "owned": [
            "_0"
          ]
        },
        "statement: StorageDead(_5)"
      ],
      [
        "state:",
        {
          "accessible": [
            "_0"
          ],
          "owned": [
            "_0"
          ]
        },
        "statement: StorageDead(_4)"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [
        "_0"
      ],
      "owned": [
        "_0"
      ]
    },
    "terminator: drop(_1) -> [return: bb8, unwind: bb12]",
    {
      "bb12": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ],
      "bb8": [
        "state:",
        {
          "accessible": [
            "_0"
          ],
          "owned": [
            "_0"
          ]
        }
      ]
    }
  ],
  "bb8": [
    [
      [
        "state:",
        {
          "accessible": [
            "_0"
          ],
          "owned": [
            "_0"
          ]
        },
        "statement: StorageDead(_1)"
      ]
    ],
    "state before terminator:",
    {
      "accessible": [
        "_0"
      ],
      "owned": [
        "_0"
      ]
    },
    "terminator: return",
    {}
  ],
  "bb9": [
    [],
    "state before terminator:",
    {
      "accessible": [],
      "owned": []
    },
    "terminator: drop(_16) -> [return: bb10, unwind terminate]",
    {
      "bb10": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ]
    }
  ],
  "bb10": [
    [],
    "state before terminator:",
    {
      "accessible": [],
      "owned": []
    },
    "terminator: drop(_1) -> [return: bb12, unwind terminate]",
    {
      "bb12": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ]
    }
  ],
  "bb11": [
    [],
    "state before terminator:",
    {
      "accessible": [],
      "owned": []
    },
    "terminator: drop(_2) -> [return: bb12, unwind terminate]",
    {
      "bb12": [
        "state:",
        {
          "accessible": [],
          "owned": []
        }
      ]
    }
  ],
  "bb12": [
    [],
    "state before terminator:",
    {
      "accessible": [],
      "owned": []
    },
    "terminator: resume",
    {}
  ]
}
