Analyzing file $DIR/calls.rs using ReachingDefsAnalysis...
Result for function main():
{
  "bb0": [
    [
      [
        "state:",
        {},
        "statement: StorageLive(_1)"
      ]
    ],
    "state before terminator:",
    {},
    "terminator: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]",
    {
      "bb1": [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ]
        }
      ],
      "bb5": [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ]
        }
      ]
    }
  ],
  "bb1": [
    [
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ]
        },
        "statement: FakeRead(ForLet(None), _1)"
      ],
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ]
        },
        "statement: StorageLive(_2)"
      ]
    ],
    "state before terminator:",
    {
      "_1": [
        "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
      ]
    },
    "terminator: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]",
    {
      "bb2": [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ]
        }
      ],
      "bb5": [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ]
        }
      ]
    }
  ],
  "bb2": [
    [
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ]
        },
        "statement: FakeRead(ForLet(None), _2)"
      ],
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ]
        },
        "statement: StorageLive(_3)"
      ],
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ]
        },
        "statement: StorageLive(_4)"
      ],
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ]
        },
        "statement: _4 = _1"
      ],
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ]
        },
        "statement: StorageLive(_5)"
      ],
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ]
        },
        "statement: _5 = _2"
      ],
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ]
        },
        "statement: _6 = CheckedAdd(_4, _5)"
      ]
    ],
    "state before terminator:",
    {
      "_1": [
        "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
      ],
      "_2": [
        "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
      ],
      "_4": [
        "bb2[3]: _4 = _1"
      ],
      "_5": [
        "bb2[5]: _5 = _2"
      ],
      "_6": [
        "bb2[6]: _6 = CheckedAdd(_4, _5)"
      ]
    },
    "terminator: assert(!move (_6.1: bool), /"attempt to compute `{} + {}`, which would overflow/", move _4, move _5) -> [success: bb3, unwind: bb5]",
    {
      "bb3": [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ],
          "_6": [
            "bb2[6]: _6 = CheckedAdd(_4, _5)"
          ]
        }
      ],
      "bb5": [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ],
          "_6": [
            "bb2[6]: _6 = CheckedAdd(_4, _5)"
          ]
        }
      ]
    }
  ],
  "bb3": [
    [
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ],
          "_6": [
            "bb2[6]: _6 = CheckedAdd(_4, _5)"
          ]
        },
        "statement: _3 = move (_6.0: i32)"
      ],
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_3": [
            "bb3[0]: _3 = move (_6.0: i32)"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ],
          "_6": [
            "bb2[6]: _6 = CheckedAdd(_4, _5)"
          ]
        },
        "statement: StorageDead(_5)"
      ],
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_3": [
            "bb3[0]: _3 = move (_6.0: i32)"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ],
          "_6": [
            "bb2[6]: _6 = CheckedAdd(_4, _5)"
          ]
        },
        "statement: StorageDead(_4)"
      ],
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_3": [
            "bb3[0]: _3 = move (_6.0: i32)"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ],
          "_6": [
            "bb2[6]: _6 = CheckedAdd(_4, _5)"
          ]
        },
        "statement: FakeRead(ForLet(None), _3)"
      ],
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_3": [
            "bb3[0]: _3 = move (_6.0: i32)"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ],
          "_6": [
            "bb2[6]: _6 = CheckedAdd(_4, _5)"
          ]
        },
        "statement: StorageLive(_7)"
      ],
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_3": [
            "bb3[0]: _3 = move (_6.0: i32)"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ],
          "_6": [
            "bb2[6]: _6 = CheckedAdd(_4, _5)"
          ]
        },
        "statement: StorageLive(_8)"
      ],
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_3": [
            "bb3[0]: _3 = move (_6.0: i32)"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ],
          "_6": [
            "bb2[6]: _6 = CheckedAdd(_4, _5)"
          ]
        },
        "statement: _8 = _3"
      ]
    ],
    "state before terminator:",
    {
      "_1": [
        "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
      ],
      "_2": [
        "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
      ],
      "_3": [
        "bb3[0]: _3 = move (_6.0: i32)"
      ],
      "_4": [
        "bb2[3]: _4 = _1"
      ],
      "_5": [
        "bb2[5]: _5 = _2"
      ],
      "_6": [
        "bb2[6]: _6 = CheckedAdd(_4, _5)"
      ],
      "_8": [
        "bb3[6]: _8 = _3"
      ]
    },
    "terminator: _7 = f(move _8) -> [return: bb4, unwind: bb5]",
    {
      "bb4": [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_3": [
            "bb3[0]: _3 = move (_6.0: i32)"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ],
          "_6": [
            "bb2[6]: _6 = CheckedAdd(_4, _5)"
          ],
          "_7": [
            "bb3[7]: _7 = f(move _8) -> [return: bb4, unwind: bb5]"
          ],
          "_8": [
            "bb3[6]: _8 = _3"
          ]
        }
      ],
      "bb5": [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_3": [
            "bb3[0]: _3 = move (_6.0: i32)"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ],
          "_6": [
            "bb2[6]: _6 = CheckedAdd(_4, _5)"
          ],
          "_7": [
            "bb3[7]: _7 = f(move _8) -> [return: bb4, unwind: bb5]"
          ],
          "_8": [
            "bb3[6]: _8 = _3"
          ]
        }
      ]
    }
  ],
  "bb4": [
    [
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_3": [
            "bb3[0]: _3 = move (_6.0: i32)"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ],
          "_6": [
            "bb2[6]: _6 = CheckedAdd(_4, _5)"
          ],
          "_7": [
            "bb3[7]: _7 = f(move _8) -> [return: bb4, unwind: bb5]"
          ],
          "_8": [
            "bb3[6]: _8 = _3"
          ]
        },
        "statement: StorageDead(_8)"
      ],
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_3": [
            "bb3[0]: _3 = move (_6.0: i32)"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ],
          "_6": [
            "bb2[6]: _6 = CheckedAdd(_4, _5)"
          ],
          "_7": [
            "bb3[7]: _7 = f(move _8) -> [return: bb4, unwind: bb5]"
          ],
          "_8": [
            "bb3[6]: _8 = _3"
          ]
        },
        "statement: FakeRead(ForLet(None), _7)"
      ],
      [
        "state:",
        {
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_3": [
            "bb3[0]: _3 = move (_6.0: i32)"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ],
          "_6": [
            "bb2[6]: _6 = CheckedAdd(_4, _5)"
          ],
          "_7": [
            "bb3[7]: _7 = f(move _8) -> [return: bb4, unwind: bb5]"
          ],
          "_8": [
            "bb3[6]: _8 = _3"
          ]
        },
        "statement: _0 = const ()"
      ],
      [
        "state:",
        {
          "_0": [
            "bb4[2]: _0 = const ()"
          ],
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_3": [
            "bb3[0]: _3 = move (_6.0: i32)"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ],
          "_6": [
            "bb2[6]: _6 = CheckedAdd(_4, _5)"
          ],
          "_7": [
            "bb3[7]: _7 = f(move _8) -> [return: bb4, unwind: bb5]"
          ],
          "_8": [
            "bb3[6]: _8 = _3"
          ]
        },
        "statement: StorageDead(_7)"
      ],
      [
        "state:",
        {
          "_0": [
            "bb4[2]: _0 = const ()"
          ],
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_3": [
            "bb3[0]: _3 = move (_6.0: i32)"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ],
          "_6": [
            "bb2[6]: _6 = CheckedAdd(_4, _5)"
          ],
          "_7": [
            "bb3[7]: _7 = f(move _8) -> [return: bb4, unwind: bb5]"
          ],
          "_8": [
            "bb3[6]: _8 = _3"
          ]
        },
        "statement: StorageDead(_3)"
      ],
      [
        "state:",
        {
          "_0": [
            "bb4[2]: _0 = const ()"
          ],
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_3": [
            "bb3[0]: _3 = move (_6.0: i32)"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ],
          "_6": [
            "bb2[6]: _6 = CheckedAdd(_4, _5)"
          ],
          "_7": [
            "bb3[7]: _7 = f(move _8) -> [return: bb4, unwind: bb5]"
          ],
          "_8": [
            "bb3[6]: _8 = _3"
          ]
        },
        "statement: StorageDead(_2)"
      ],
      [
        "state:",
        {
          "_0": [
            "bb4[2]: _0 = const ()"
          ],
          "_1": [
            "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
          ],
          "_2": [
            "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
          ],
          "_3": [
            "bb3[0]: _3 = move (_6.0: i32)"
          ],
          "_4": [
            "bb2[3]: _4 = _1"
          ],
          "_5": [
            "bb2[5]: _5 = _2"
          ],
          "_6": [
            "bb2[6]: _6 = CheckedAdd(_4, _5)"
          ],
          "_7": [
            "bb3[7]: _7 = f(move _8) -> [return: bb4, unwind: bb5]"
          ],
          "_8": [
            "bb3[6]: _8 = _3"
          ]
        },
        "statement: StorageDead(_1)"
      ]
    ],
    "state before terminator:",
    {
      "_0": [
        "bb4[2]: _0 = const ()"
      ],
      "_1": [
        "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
      ],
      "_2": [
        "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
      ],
      "_3": [
        "bb3[0]: _3 = move (_6.0: i32)"
      ],
      "_4": [
        "bb2[3]: _4 = _1"
      ],
      "_5": [
        "bb2[5]: _5 = _2"
      ],
      "_6": [
        "bb2[6]: _6 = CheckedAdd(_4, _5)"
      ],
      "_7": [
        "bb3[7]: _7 = f(move _8) -> [return: bb4, unwind: bb5]"
      ],
      "_8": [
        "bb3[6]: _8 = _3"
      ]
    },
    "terminator: return",
    {}
  ],
  "bb5": [
    [],
    "state before terminator:",
    {
      "_1": [
        "bb0[1]: _1 = f(const -1_i32) -> [return: bb1, unwind: bb5]"
      ],
      "_2": [
        "bb1[2]: _2 = f(const 1_i32) -> [return: bb2, unwind: bb5]"
      ],
      "_3": [
        "bb3[0]: _3 = move (_6.0: i32)"
      ],
      "_4": [
        "bb2[3]: _4 = _1"
      ],
      "_5": [
        "bb2[5]: _5 = _2"
      ],
      "_6": [
        "bb2[6]: _6 = CheckedAdd(_4, _5)"
      ],
      "_7": [
        "bb3[7]: _7 = f(move _8) -> [return: bb4, unwind: bb5]"
      ],
      "_8": [
        "bb3[6]: _8 = _3"
      ]
    },
    "terminator: resume",
    {}
  ]
}