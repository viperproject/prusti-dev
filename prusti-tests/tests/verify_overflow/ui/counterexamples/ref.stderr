error: [Prusti: verification error] postcondition might not hold.
  --> $DIR/ref.rs:6:11
   |
6  | #[ensures(result != 0)]
   |           ^^^^^^^^^^^
   |
note: the error originates here
  --> $DIR/ref.rs:7:1
   |
7  | / fn test1(x: &mut i32) -> i32 {
8  | |     let mut y = *x;
9  | |     y = y * 3 - 12;
10 | |     *x = y;
11 | |     y
12 | | }
   | |_^
note: counterexample for "x"
       value:   ref(4)
  --> $DIR/ref.rs:7:10
   |
7  | fn test1(x: &mut i32) -> i32 {
   |          ^
note: counterexample for "x"
       value:   ref(0)
  --> $DIR/ref.rs:10:5
   |
10 |     *x = y;
   |     ^^^^^^
note: counterexample for "y"
       value:   4
  --> $DIR/ref.rs:8:17
   |
8  |     let mut y = *x;
   |                 ^^
note: counterexample for "y"
       value:   0
  --> $DIR/ref.rs:9:5
   |
9  |     y = y * 3 - 12;
   |     ^^^^^^^^^^^^^^
note: counterexample for "result"
       value:   0
  --> $DIR/ref.rs:11:5
   |
11 |     y
   |     ^

error: [Prusti: verification error] postcondition might not hold.
  --> $DIR/ref.rs:15:11
   |
15 | #[ensures(result != 14)]
   |           ^^^^^^^^^^^^
   |
note: the error originates here
  --> $DIR/ref.rs:16:1
   |
16 | / fn test2(x: &i32) -> i32 {
17 | |     let y = *x + 1;
18 | |     match y {
19 | |         x => x * 2
20 | |     }
21 | | }
   | |_^
note: counterexample for "x"
       value:   ref(6)
  --> $DIR/ref.rs:16:10
   |
16 | fn test2(x: &i32) -> i32 {
   |          ^
note: counterexample for "y"
       value:   7
  --> $DIR/ref.rs:17:13
   |
17 |     let y = *x + 1;
   |             ^^^^^^
note: counterexample for "x"
       value:   7
  --> $DIR/ref.rs:19:9
   |
19 |         x => x * 2
   |         ^
note: counterexample for "result"
       value:   14
  --> $DIR/ref.rs:19:14
   |
19 |         x => x * 2
   |              ^^^^^

error: [Prusti: verification error] the asserted expression might not hold
  --> $DIR/ref.rs:28:5
   |
28 |     assert!(a == 1); 
   |     ^^^^^^^^^^^^^^^
   |
note: the failing assertion is here
  --> $DIR/ref.rs:28:5
   |
28 |     assert!(a == 1); 
   |     ^^^^^^^^^^^^^^^
note: counterexample for "a"
       value:   1
  --> $DIR/ref.rs:24:17
   |
24 |     let mut a = 1;
   |                 ^
note: counterexample for "a"
       value:   10
  --> $DIR/ref.rs:25:14
   |
25 |     let _b = &mut a;
   |              ^^^^^^
note: counterexample for "_b"
       value:   ref(1)
  --> $DIR/ref.rs:25:14
   |
25 |     let _b = &mut a;
   |              ^^^^^^
note: counterexample for "_b"
       value:   ref(2)
  --> $DIR/ref.rs:26:5
   |
26 |     *_b = 2;
   |     ^^^^^^^
note: counterexample for "_b"
       value:   ref(10)
  --> $DIR/ref.rs:27:5
   |
27 |     *_b = 10;
   |     ^^^^^^^^
   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)

error: aborting due to 3 previous errors

