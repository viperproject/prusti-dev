// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"
// normalize-stdout-test: "#/[prusti::specs_version = /x22.+/x22/]" -> "#[prusti::specs_version = $(SPECS_VERSION)]"




#![feature(type_ascription)]
#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test1_$(NUM_UUID)() -> bool {
    !!((forall(((#[prusti::spec_only] |a: i32, b: u32| (a == a),
                                    #[prusti::spec_only] |a: i32, b: u32| (a == a)),
                                (#[prusti::spec_only] |a: i32, b: u32| (true),)),
                            #[prusti::spec_only] |a: i32, b: u32| -> bool
                                { ((a == a): bool) })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test1() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test2_$(NUM_UUID)() -> bool {
    !!((exists(((#[prusti::spec_only] |a: i32, b: u32| (a == a),
                                    #[prusti::spec_only] |a: i32, b: u32| (a == a)),
                                (#[prusti::spec_only] |a: i32, b: u32| (true),)),
                            #[prusti::spec_only] |a: i32, b: u32| -> bool
                                { ((a == a): bool) })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test2() {}
fn main() {}
ProcedureSpecification { source: DefId(0:10 ~ forall_encode_typeck[$(CRATE_ID)]::test1), kind: Inherent(Impure), pres: Inherent([DefId(0:5 ~ forall_encode_typeck[$(CRATE_ID)]::prusti_pre_item_test1_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:16 ~ forall_encode_typeck[$(CRATE_ID)]::test2), kind: Inherent(Impure), pres: Inherent([DefId(0:11 ~ forall_encode_typeck[$(CRATE_ID)]::prusti_pre_item_test2_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
