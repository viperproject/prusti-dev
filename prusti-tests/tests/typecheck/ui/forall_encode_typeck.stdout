// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"




#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":2},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":105}}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102},{/"spec_id/":/"$(UUID)/",/"expr_id/":103}],[{/"spec_id/":/"$(UUID)/",/"expr_id/":104}]]]}}"]
fn prusti_pre_item_test1_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32, b: u32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_105"]
            || -> bool { a == a };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { a == a };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || { a == a };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_104"]
            || { true };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test1() { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Exists/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":2},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":105}}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102},{/"spec_id/":/"$(UUID)/",/"expr_id/":103}],[{/"spec_id/":/"$(UUID)/",/"expr_id/":104}]]]}}"]
fn prusti_pre_item_test2_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32, b: u32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_105"]
            || -> bool { a == a };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { a == a };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || { a == a };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_104"]
            || { true };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test2() { }
fn main() { }
Procedure(ProcedureSpecification { pres: [Assertion { kind: ForAll(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32), (_3, u32)] }, TriggerSet([Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:8 ~ forall_encode_typeck[$(CRATE_ID)]::prusti_pre_item_test1_$(NUM_UUID)::{closure#0}::{closure#1}) }, Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: DefId(0:9 ~ forall_encode_typeck[$(CRATE_ID)]::prusti_pre_item_test1_$(NUM_UUID)::{closure#0}::{closure#2}) }]), Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: DefId(0:10 ~ forall_encode_typeck[$(CRATE_ID)]::prusti_pre_item_test1_$(NUM_UUID)::{closure#0}::{closure#3}) }])]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(105), expr: DefId(0:7 ~ forall_encode_typeck[$(CRATE_ID)]::prusti_pre_item_test1_$(NUM_UUID)::{closure#0}::{closure#0}) }) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Exists(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32), (_3, u32)] }, TriggerSet([Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:15 ~ forall_encode_typeck[$(CRATE_ID)]::prusti_pre_item_test2_$(NUM_UUID)::{closure#0}::{closure#1}) }, Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: DefId(0:16 ~ forall_encode_typeck[$(CRATE_ID)]::prusti_pre_item_test2_$(NUM_UUID)::{closure#0}::{closure#2}) }]), Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: DefId(0:17 ~ forall_encode_typeck[$(CRATE_ID)]::prusti_pre_item_test2_$(NUM_UUID)::{closure#0}::{closure#3}) }])]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(105), expr: DefId(0:14 ~ forall_encode_typeck[$(CRATE_ID)]::prusti_pre_item_test2_$(NUM_UUID)::{closure#0}::{closure#0}) }) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
