// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"










#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":103}}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102}]]]}}"]
fn prusti_pre_item_test1_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || -> bool { true };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { a == a };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test1() { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":103,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":104}}},[]]}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102}]]]}}"]
fn prusti_pre_item_test2_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_103"]
            |b: i32|
                {

                    #[prusti::spec_only]
                    #[prusti::expr_id =
                      "$(NUM_UUID)_104"]
                    || -> bool { true };
                };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { a == a && true };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test2() { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":103,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":105}}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":104}]]]}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102}]]]}}"]
fn prusti_pre_item_test3_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_103"]
            |b: i32|
                {

                    #[prusti::spec_only]
                    #[prusti::expr_id =
                      "$(NUM_UUID)_105"]
                    || -> bool { true };

                    #[prusti::spec_only]
                    #[prusti::expr_id =
                      "$(NUM_UUID)_104"]
                    || { a == a };
                };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { a == a };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test3() { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"ForAll/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":103,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":105}}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":104}]]]}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102}]]]}}"]
fn prusti_pre_item_test4_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_103"]
            |b: i32|
                {

                    #[prusti::spec_only]
                    #[prusti::expr_id =
                      "$(NUM_UUID)_105"]
                    || -> bool { true };

                    #[prusti::spec_only]
                    #[prusti::expr_id =
                      "$(NUM_UUID)_104"]
                    || { a == b };
                };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { a == a && true };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test4() { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Exists/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":103}}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102}]]]}}"]
fn prusti_pre_item_test5_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || -> bool { true };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { a == a };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test5() { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Exists/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"Exists/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":103,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":104}}},[]]}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102}]]]}}"]
fn prusti_pre_item_test6_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_103"]
            |b: i32|
                {

                    #[prusti::spec_only]
                    #[prusti::expr_id =
                      "$(NUM_UUID)_104"]
                    || -> bool { true };
                };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { a == a && true };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test6() { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Exists/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"Exists/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":103,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":105}}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":104}]]]}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102}]]]}}"]
fn prusti_pre_item_test7_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_103"]
            |b: i32|
                {

                    #[prusti::spec_only]
                    #[prusti::expr_id =
                      "$(NUM_UUID)_105"]
                    || -> bool { true };

                    #[prusti::spec_only]
                    #[prusti::expr_id =
                      "$(NUM_UUID)_104"]
                    || { a == a };
                };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { a == a };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test7() { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Exists/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"Exists/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":103,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":105}}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":104}]]]}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102}]]]}}"]
fn prusti_pre_item_test8_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_103"]
            |b: i32|
                {

                    #[prusti::spec_only]
                    #[prusti::expr_id =
                      "$(NUM_UUID)_105"]
                    || -> bool { true };

                    #[prusti::spec_only]
                    #[prusti::expr_id =
                      "$(NUM_UUID)_104"]
                    || { a == b };
                };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { a == a && true };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test8() { }
fn main() { }
Procedure(ProcedureSpecification { pres: [Assertion { kind: ForAll(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32)] }, TriggerSet([Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:8 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test1_$(NUM_UUID)::{closure#0}::{closure#1}) }])]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: DefId(0:7 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test1_$(NUM_UUID)::{closure#0}::{closure#0}) }) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Exists(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32)] }, TriggerSet([Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:33 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test5_$(NUM_UUID)::{closure#0}::{closure#1}) }])]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: DefId(0:32 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test5_$(NUM_UUID)::{closure#0}::{closure#0}) }) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Exists(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32)] }, TriggerSet([Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:39 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test6_$(NUM_UUID)::{closure#0}::{closure#1}) }])]), Assertion { kind: Exists(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), vars: [(_2, i32)] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: DefId(0:38 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test6_$(NUM_UUID)::{closure#0}::{closure#0}::{closure#0}) }) }) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: ForAll(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32)] }, TriggerSet([Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:14 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test2_$(NUM_UUID)::{closure#0}::{closure#1}) }])]), Assertion { kind: ForAll(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), vars: [(_2, i32)] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: DefId(0:13 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test2_$(NUM_UUID)::{closure#0}::{closure#0}::{closure#0}) }) }) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Exists(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32)] }, TriggerSet([Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:46 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test7_$(NUM_UUID)::{closure#0}::{closure#1}) }])]), Assertion { kind: Exists(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), vars: [(_2, i32)] }, TriggerSet([Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: DefId(0:45 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test7_$(NUM_UUID)::{closure#0}::{closure#0}::{closure#1}) }])]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(105), expr: DefId(0:44 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test7_$(NUM_UUID)::{closure#0}::{closure#0}::{closure#0}) }) }) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Exists(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32)] }, TriggerSet([Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:53 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test8_$(NUM_UUID)::{closure#0}::{closure#1}) }])]), Assertion { kind: Exists(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), vars: [(_2, i32)] }, TriggerSet([Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: DefId(0:52 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test8_$(NUM_UUID)::{closure#0}::{closure#0}::{closure#1}) }])]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(105), expr: DefId(0:51 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test8_$(NUM_UUID)::{closure#0}::{closure#0}::{closure#0}) }) }) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: ForAll(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32)] }, TriggerSet([Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:21 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test3_$(NUM_UUID)::{closure#0}::{closure#1}) }])]), Assertion { kind: ForAll(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), vars: [(_2, i32)] }, TriggerSet([Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: DefId(0:20 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test3_$(NUM_UUID)::{closure#0}::{closure#0}::{closure#1}) }])]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(105), expr: DefId(0:19 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test3_$(NUM_UUID)::{closure#0}::{closure#0}::{closure#0}) }) }) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: ForAll(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32)] }, TriggerSet([Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:28 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test4_$(NUM_UUID)::{closure#0}::{closure#1}) }])]), Assertion { kind: ForAll(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), vars: [(_2, i32)] }, TriggerSet([Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: DefId(0:27 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test4_$(NUM_UUID)::{closure#0}::{closure#0}::{closure#1}) }])]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(105), expr: DefId(0:26 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test4_$(NUM_UUID)::{closure#0}::{closure#0}::{closure#0}) }) }) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
