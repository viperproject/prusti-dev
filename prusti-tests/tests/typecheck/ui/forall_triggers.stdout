// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"
// normalize-stdout-test: "#/[prusti::specs_version = /x22.+/x22/]" -> "#[prusti::specs_version = $(SPECS_VERSION)]"










#![feature(type_ascription)]
#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test1_$(NUM_UUID)() -> bool {
    !!((forall(((#[prusti::spec_only] |a: i32| (a == a),),),
                            #[prusti::spec_only] |a: i32| -> bool { ((true): bool) })):
                    bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test1() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test2_$(NUM_UUID)() -> bool {
    !!((forall(((#[prusti::spec_only] |a: i32| ((a == a) && (true)),),),
                            #[prusti::spec_only] |a: i32| -> bool
                                {
                                    ((forall((),
                                                    #[prusti::spec_only] |b: i32| -> bool { ((true): bool) })):
                                            bool)
                                })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test2() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test3_$(NUM_UUID)() -> bool {
    !!((forall(((#[prusti::spec_only] |a: i32| (a == a),),),
                            #[prusti::spec_only] |a: i32| -> bool
                                {
                                    ((forall(((#[prusti::spec_only] |b: i32| (a == a),),),
                                                    #[prusti::spec_only] |b: i32| -> bool { ((true): bool) })):
                                            bool)
                                })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test3() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test4_$(NUM_UUID)() -> bool {
    !!((forall(((#[prusti::spec_only] |a: i32| ((a == a) && (true)),),),
                            #[prusti::spec_only] |a: i32| -> bool
                                {
                                    ((forall(((#[prusti::spec_only] |b: i32| (a == b),),),
                                                    #[prusti::spec_only] |b: i32| -> bool { ((true): bool) })):
                                            bool)
                                })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test4() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test5_$(NUM_UUID)() -> bool {
    !!((exists(((#[prusti::spec_only] |a: i32| (a == a),),),
                            #[prusti::spec_only] |a: i32| -> bool { ((true): bool) })):
                    bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test5() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test6_$(NUM_UUID)() -> bool {
    !!((exists(((#[prusti::spec_only] |a: i32| ((a == a) && (true)),),),
                            #[prusti::spec_only] |a: i32| -> bool
                                {
                                    ((exists((),
                                                    #[prusti::spec_only] |b: i32| -> bool { ((true): bool) })):
                                            bool)
                                })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test6() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test7_$(NUM_UUID)() -> bool {
    !!((exists(((#[prusti::spec_only] |a: i32| (a == a),),),
                            #[prusti::spec_only] |a: i32| -> bool
                                {
                                    ((exists(((#[prusti::spec_only] |b: i32| (a == a),),),
                                                    #[prusti::spec_only] |b: i32| -> bool { ((true): bool) })):
                                            bool)
                                })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test7() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test8_$(NUM_UUID)() -> bool {
    !!((exists(((#[prusti::spec_only] |a: i32| ((a == a) && (true)),),),
                            #[prusti::spec_only] |a: i32| -> bool
                                {
                                    ((exists(((#[prusti::spec_only] |b: i32| (a == b),),),
                                                    #[prusti::spec_only] |b: i32| -> bool { ((true): bool) })):
                                            bool)
                                })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test8() {}
fn main() {}
ProcedureSpecification { source: DefId(0:8 ~ forall_triggers[$(CRATE_ID)]::test1), kind: Inherent(Impure), pres: Inherent([DefId(0:5 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test1_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:13 ~ forall_triggers[$(CRATE_ID)]::test2), kind: Inherent(Impure), pres: Inherent([DefId(0:9 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test2_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:19 ~ forall_triggers[$(CRATE_ID)]::test3), kind: Inherent(Impure), pres: Inherent([DefId(0:14 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test3_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:25 ~ forall_triggers[$(CRATE_ID)]::test4), kind: Inherent(Impure), pres: Inherent([DefId(0:20 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test4_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:29 ~ forall_triggers[$(CRATE_ID)]::test5), kind: Inherent(Impure), pres: Inherent([DefId(0:26 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test5_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:34 ~ forall_triggers[$(CRATE_ID)]::test6), kind: Inherent(Impure), pres: Inherent([DefId(0:30 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test6_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:40 ~ forall_triggers[$(CRATE_ID)]::test7), kind: Inherent(Impure), pres: Inherent([DefId(0:35 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test7_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:46 ~ forall_triggers[$(CRATE_ID)]::test8), kind: Inherent(Impure), pres: Inherent([DefId(0:41 ~ forall_triggers[$(CRATE_ID)]::prusti_pre_item_test8_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
