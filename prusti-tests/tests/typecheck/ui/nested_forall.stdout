// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"









#![feature(type_ascription)]
#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test1_$(NUM_UUID)() -> bool {
    !!((forall((),
                            #[prusti::spec_only] |a: i32| -> bool
                                {
                                    ((forall((),
                                                    #[prusti::spec_only] |a: i32| -> bool
                                                        { ((a == a): bool) })): bool)
                                })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test1() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test2_$(NUM_UUID)() -> bool {
    !!((forall((),
                            #[prusti::spec_only] |a: i32| -> bool
                                {
                                    ((forall((),
                                                    #[prusti::spec_only] |b: i32| -> bool
                                                        { (((!(a == a) || (b == b))): bool) })): bool)
                                })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test2() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test3_$(NUM_UUID)() -> bool {
    !!((forall((),
                            #[prusti::spec_only] |a: i32| -> bool
                                {
                                    ((forall((),
                                                    #[prusti::spec_only] |b: i32| -> bool
                                                        {
                                                            ((forall((),
                                                                            #[prusti::spec_only] |c: i32| -> bool
                                                                                { ((a == a && b == b): bool) })): bool)
                                                        })): bool)
                                })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test3() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test4_$(NUM_UUID)() -> bool {
    !!((exists((),
                            #[prusti::spec_only] |a: i32| -> bool
                                {
                                    ((exists((),
                                                    #[prusti::spec_only] |a: i32| -> bool
                                                        { ((a == a): bool) })): bool)
                                })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test4() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test5_$(NUM_UUID)() -> bool {
    !!((exists((),
                            #[prusti::spec_only] |a: i32| -> bool
                                {
                                    ((exists((),
                                                    #[prusti::spec_only] |b: i32| -> bool
                                                        { (((!(a == a) || (b == b))): bool) })): bool)
                                })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test5() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test6_$(NUM_UUID)() -> bool {
    !!((exists((),
                            #[prusti::spec_only] |a: i32| -> bool
                                {
                                    ((exists((),
                                                    #[prusti::spec_only] |b: i32| -> bool
                                                        {
                                                            ((exists((),
                                                                            #[prusti::spec_only] |c: i32| -> bool
                                                                                { ((a == a && b == b): bool) })): bool)
                                                        })): bool)
                                })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test6() {}
fn main() {}
ProcedureSpecification { span: Some($DIR/nested_forall.rs:9:1: 9:11 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:5 ~ nested_forall[$(CRATE_ID)]::prusti_pre_item_test1_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/nested_forall.rs:12:1: 12:11 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:9 ~ nested_forall[$(CRATE_ID)]::prusti_pre_item_test2_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/nested_forall.rs:15:1: 15:11 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:13 ~ nested_forall[$(CRATE_ID)]::prusti_pre_item_test3_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/nested_forall.rs:18:1: 18:11 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:18 ~ nested_forall[$(CRATE_ID)]::prusti_pre_item_test4_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/nested_forall.rs:21:1: 21:11 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:22 ~ nested_forall[$(CRATE_ID)]::prusti_pre_item_test5_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/nested_forall.rs:24:1: 24:11 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:26 ~ nested_forall[$(CRATE_ID)]::prusti_pre_item_test6_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) }
