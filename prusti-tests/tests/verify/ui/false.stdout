// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"
// normalize-stdout-test: "#/[prusti::specs_version = /x22.+/x22/]" -> "#[prusti::specs_version = $(SPECS_VERSION)]"




#![feature(type_ascription)]
#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[allow(unused_must_use, unused_parens, unused_variables, dead_code, non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_post_item_test1_$(NUM_UUID)(result: ())
    -> bool {
    !!((false): bool)
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test1() {}
fn test2() {
    if !false { ::core::panicking::panic("assertion failed: false") };
}
fn main() {}
ProcedureSpecification { source: DefId(0:7 ~ false[$(CRATE_ID)]::test1), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:6 ~ false[$(CRATE_ID)]::prusti_post_item_test1_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
