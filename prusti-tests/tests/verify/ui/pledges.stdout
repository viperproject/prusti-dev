// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"
// normalize-stdout-test: "#/[prusti::specs_version = /x22.+/x22/]" -> "#[prusti::specs_version = $(SPECS_VERSION)]"








#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
struct T {
    f: u32,
    g: u32,
}
fn borrows(_x: &mut u32) {
    let mut a = T { f: 1, g: 2 };
    if !(a.f == 1) { ::core::panicking::panic("assertion failed: a.f == 1") };
    if !(a.g == 2) { ::core::panicking::panic("assertion failed: a.g == 2") };
    let x = &mut a;
    let y = &mut x.f;
    let z = &x.g;
    *y = 5;
    if !(*z == 2) { ::core::panicking::panic("assertion failed: *z == 2") };
    if !(a.f == 5) { ::core::panicking::panic("assertion failed: a.f == 5") };
}
fn borrows_fail(_x: &mut u32) {
    let mut a = T { f: 1, g: 2 };
    if !(a.f == 1) { ::core::panicking::panic("assertion failed: a.f == 1") };
    if !(a.g == 2) { ::core::panicking::panic("assertion failed: a.g == 2") };
    let x = &mut a;
    let y = &mut x.f;
    let z = &x.g;
    *y = 5;
    if !(*z == 2) { ::core::panicking::panic("assertion failed: *z == 2") };
    if !(a.f == 6) { ::core::panicking::panic("assertion failed: a.f == 6") };
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pledge_item_reborrow_$(NUM_UUID)<'a>(x:
        &'a mut T, result: &'a mut u32) -> bool {
    let prusti_result: bool = before_expiry(*result) == x.f;
    prusti_result
}
#[prusti::pledge_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn reborrow<'a>(x: &'a mut T) -> &'a mut u32 { &mut x.f }
fn reborrow2(x: &mut T) -> &mut u32 { &mut x.f }
fn reborrow_caller(a: T) {
    let mut a = a;
    let x = &mut a;
    let y = reborrow(x);
    *y = 5;
    if !(a.f == 5) { ::core::panicking::panic("assertion failed: a.f == 5") };
}
fn main() {}
ProcedureSpecification { source: DefId(0:14 ~ pledges[$(CRATE_ID)]::reborrow), kind: Inherent(Impure), pres: Empty, posts: Empty, pledges: Inherent([Pledge { reference: None, lhs: None, rhs: DefId(0:12 ~ pledges[$(CRATE_ID)]::prusti_pledge_item_reborrow_$(NUM_UUID)) }]), trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
