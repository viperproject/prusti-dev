// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"








#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
struct T {
    f: u32,
    g: u32,
}
fn borrows(_x: &mut u32) {
    let mut a = T{f: 1, g: 2,};
    if !(a.f == 1) { ::core::panicking::panic("assertion failed: a.f == 1") };
    if !(a.g == 2) { ::core::panicking::panic("assertion failed: a.g == 2") };
    let x = &mut a;
    let y = &mut x.f;
    let z = &x.g;
    *y = 5;
    if !(*z == 2) { ::core::panicking::panic("assertion failed: *z == 2") };
    if !(a.f == 5) { ::core::panicking::panic("assertion failed: a.f == 5") };
}
fn borrows_fail(_x: &mut u32) {
    let mut a = T{f: 1, g: 2,};
    if !(a.f == 1) { ::core::panicking::panic("assertion failed: a.f == 1") };
    if !(a.g == 2) { ::core::panicking::panic("assertion failed: a.g == 2") };
    let x = &mut a;
    let y = &mut x.f;
    let z = &x.g;
    *y = 5;
    if !(*z == 2) { ::core::panicking::panic("assertion failed: *z == 2") };
    if !(a.f == 6) { ::core::panicking::panic("assertion failed: a.f == 6") };
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}}"]
fn prusti_post_item_reborrow_$(NUM_UUID)<'a>(x:
                                                                      &'a mut T,
                                                                  result:
                                                                      &'a mut u32) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_102"]
    || -> bool { before_expiry(*result) == x.f };
}
#[prusti::pledge_spec_id_ref = ":$(NUM_UUID)"]
fn reborrow<'a>(x: &'a mut T) -> &'a mut u32 { &mut x.f }
fn reborrow2(x: &mut T) -> &mut u32 { &mut x.f }
fn reborrow_caller(a: T) {
    let mut a = a;
    let x = &mut a;
    let y = reborrow(x);
    *y = 5;
    if !(a.f == 5) { ::core::panicking::panic("assertion failed: a.f == 5") };
}
fn main() { }
Procedure(ProcedureSpecification { pres: [], posts: [], pledges: [Pledge { reference: None, lhs: None, rhs: Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:14 ~ pledges[$(CRATE_ID)]::prusti_post_item_reborrow_$(NUM_UUID)::{closure#0}) }) } }], predicate_body: None, pure: false, trusted: false })
