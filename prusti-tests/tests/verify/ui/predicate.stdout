// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"











// this must pass, i.e. the evaluation must not short-circuit if a predicate
// somewhere down the call stack is false

// Provide an existential witness.
#![feature(type_ascription)]
#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[prusti::pure]
fn identity(x: i32) -> i32 { x }
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pred_item_true_p1_$(NUM_UUID)() -> bool {
    !!((forall((), #[prusti::spec_only] |x: i32| -> bool { ((true): bool) })):
                    bool)
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::pred_spec_id_ref = "$(NUM_UUID)"]
fn true_p1() -> bool {
    ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["not implemented: "],
            &[::core::fmt::ArgumentV1::new_display(&::core::fmt::Arguments::new_v1(&["predicate"],
                                    &[]))]))
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pred_item_true_p2_$(NUM_UUID)() -> bool {
    !!((exists((), #[prusti::spec_only] |x: i32| -> bool { ((true): bool) })):
                    bool)
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::pred_spec_id_ref = "$(NUM_UUID)"]
fn true_p2() -> bool {
    ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["not implemented: "],
            &[::core::fmt::ArgumentV1::new_display(&::core::fmt::Arguments::new_v1(&["predicate"],
                                    &[]))]))
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pred_item_forall_identity_$(NUM_UUID)()
    -> bool {
    !!((forall((),
                            #[prusti::spec_only] |x: i32| -> bool
                                { ((identity(x) == x): bool) })): bool)
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::pred_spec_id_ref = "$(NUM_UUID)"]
fn forall_identity() -> bool {
    ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["not implemented: "],
            &[::core::fmt::ArgumentV1::new_display(&::core::fmt::Arguments::new_v1(&["predicate"],
                                    &[]))]))
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pred_item_exists_identity_$(NUM_UUID)()
    -> bool {
    !!((exists(((#[prusti::spec_only] |x: i32| (identity(x)),),),
                            #[prusti::spec_only] |x: i32| -> bool
                                { ((identity(x) == x): bool) })): bool)
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::pred_spec_id_ref = "$(NUM_UUID)"]
fn exists_identity() -> bool {
    ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["not implemented: "],
            &[::core::fmt::ArgumentV1::new_display(&::core::fmt::Arguments::new_v1(&["predicate"],
                                    &[]))]))
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test_identity_1_$(NUM_UUID)()
    -> bool {
    !!((true_p1()): bool)
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test_identity_1_$(NUM_UUID)()
    -> bool {
    !!((forall_identity()): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test_identity_1() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test_identity_2_$(NUM_UUID)()
    -> bool {
    !!((true_p2()): bool)
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test_identity_2_$(NUM_UUID)()
    -> bool {
    !!((exists_identity()): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test_identity_2() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pred_item_false_p_$(NUM_UUID)() -> bool {
    !!((false): bool)
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::pred_spec_id_ref = "$(NUM_UUID)"]
fn false_p() -> bool {
    ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["not implemented: "],
            &[::core::fmt::ArgumentV1::new_display(&::core::fmt::Arguments::new_v1(&["predicate"],
                                    &[]))]))
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_precond_or_correctly_$(NUM_UUID)()
    -> bool {
    !!((false_p() || true): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn precond_or_correctly() -> bool { true }
fn main() {
    if !(identity(5) == 5) {
            ::core::panicking::panic("assertion failed: identity(5) == 5")
        };
    test_identity_1();
    test_identity_2();
    precond_or_correctly();
}
ProcedureSpecification { span: Some($DIR/predicate.rs:10:1: 10:27 (#0)), kind: Inherent(Pure), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/predicate.rs:13:5: 13:25 (#0)), kind: Inherent(Predicate(Some(DefId(0:6 ~ predicate[$(CRATE_ID)]::prusti_pred_item_true_p1_$(NUM_UUID))))), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/predicate.rs:19:5: 19:25 (#0)), kind: Inherent(Predicate(Some(DefId(0:9 ~ predicate[$(CRATE_ID)]::prusti_pred_item_true_p2_$(NUM_UUID))))), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/predicate.rs:45:5: 45:25 (#0)), kind: Inherent(Predicate(Some(DefId(0:25 ~ predicate[$(CRATE_ID)]::prusti_pred_item_false_p_$(NUM_UUID))))), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/predicate.rs:25:5: 25:33 (#0)), kind: Inherent(Predicate(Some(DefId(0:12 ~ predicate[$(CRATE_ID)]::prusti_pred_item_forall_identity_$(NUM_UUID))))), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/predicate.rs:31:5: 31:33 (#0)), kind: Inherent(Predicate(Some(DefId(0:15 ~ predicate[$(CRATE_ID)]::prusti_pred_item_exists_identity_$(NUM_UUID))))), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/predicate.rs:53:1: 53:34 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:27 ~ predicate[$(CRATE_ID)]::prusti_pre_item_precond_or_correctly_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/predicate.rs:38:1: 38:21 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:19 ~ predicate[$(CRATE_ID)]::prusti_pre_item_test_identity_1_$(NUM_UUID)), DefId(0:20 ~ predicate[$(CRATE_ID)]::prusti_pre_item_test_identity_1_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/predicate.rs:42:1: 42:21 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:22 ~ predicate[$(CRATE_ID)]::prusti_pre_item_test_identity_2_$(NUM_UUID)), DefId(0:23 ~ predicate[$(CRATE_ID)]::prusti_pre_item_test_identity_2_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) }
