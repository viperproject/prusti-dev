// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"







// A witness.

// TODO: Figure out why the error position is worse than for test3. I
// have checked the emitted Viper code (including the positions) and
// could not see any relevant differences.

#![feature(type_ascription)]
#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[prusti::pure]
fn identity(x: i32) -> i32 { x }
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_post_item_test1_$(NUM_UUID)(result: ())
    -> bool {
    !!((forall((), #[prusti::spec_only] |x: i32| -> bool { ((true): bool) })):
                    bool)
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test1() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_post_item_test2_$(NUM_UUID)(result: ())
    -> bool {
    !!((forall((),
                            #[prusti::spec_only] |x: i32| -> bool
                                { ((identity(x) == x): bool) })): bool)
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test2() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_post_item_test3_$(NUM_UUID)(result: ())
    -> bool {
    !!((forall((),
                            #[prusti::spec_only] |x: i32| -> bool
                                { ((identity(x) == x + 1): bool) })): bool)
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test3() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_post_item_test4_$(NUM_UUID)(result: ())
    -> bool {
    !!((exists((), #[prusti::spec_only] |x: i32| -> bool { ((true): bool) })):
                    bool)
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test4() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_post_item_test5_$(NUM_UUID)(result: ())
    -> bool {
    !!((identity(1) == 1): bool)
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_post_item_test5_$(NUM_UUID)(result: ())
    -> bool {
    !!((exists((),
                            #[prusti::spec_only] |x: i32| -> bool
                                { ((identity(x) == x): bool) })): bool)
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test5() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_post_item_test6_$(NUM_UUID)(result: ())
    -> bool {
    !!((exists((),
                            #[prusti::spec_only] |x: i32| -> bool
                                { ((identity(x) == x + 1): bool) })): bool)
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test6() {}
fn main() {}
ProcedureSpecification { span: Some($DIR/forall_verify.rs:9:1: 9:27 (#0)), kind: Inherent(Pure), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/forall_verify.rs:12:1: 12:11 (#0)), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:6 ~ forall_verify[$(CRATE_ID)]::prusti_post_item_test1_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/forall_verify.rs:15:1: 15:11 (#0)), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:9 ~ forall_verify[$(CRATE_ID)]::prusti_post_item_test2_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/forall_verify.rs:18:1: 18:11 (#0)), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:12 ~ forall_verify[$(CRATE_ID)]::prusti_post_item_test3_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/forall_verify.rs:21:1: 21:11 (#0)), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:15 ~ forall_verify[$(CRATE_ID)]::prusti_post_item_test4_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/forall_verify.rs:31:1: 31:11 (#0)), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:22 ~ forall_verify[$(CRATE_ID)]::prusti_post_item_test6_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/forall_verify.rs:25:1: 25:11 (#0)), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:18 ~ forall_verify[$(CRATE_ID)]::prusti_post_item_test5_$(NUM_UUID)), DefId(0:19 ~ forall_verify[$(CRATE_ID)]::prusti_post_item_test5_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) }
