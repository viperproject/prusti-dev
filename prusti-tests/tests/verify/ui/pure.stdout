// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"










// test that we get correct span information






#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[prusti::pure]
fn identity(x: u32) -> u32 { x }
fn test_identity1() {
    if !(5 == identity(5)) {
        ::core::panicking::panic("assertion failed: 5 == identity(5)")
    };
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_post_item_test_identity2_$(NUM_UUID)(result:
                                                                        ()) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { 6 == identity(6) };
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test_identity2() { }
#[prusti::pure]
fn max(a: i32, b: i32) -> i32 { if a > b { a } else { b } }
fn test_max1() {
    let a = 5;
    let b = 6;
    let z = max(a, b);
    if !(z == 6) { ::core::panicking::panic("assertion failed: z == 6") };
}
fn test_max2() {
    let a = 5;
    let b = 6;
    let z = max(a, b);
    if !(z == 5) { ::core::panicking::panic("assertion failed: z == 5") };
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"And/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}},{/"kind/":{/"Implies/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":103}}}]}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":104}}}]}}"]
fn prusti_post_item_test_max3_$(NUM_UUID)(result: i32) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { true };

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_102"]
    || -> bool { true };

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_103"]
    || -> bool { result == 3 };

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_104"]
    || -> bool { true || false };
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test_max3() -> i32 { let a = 4; let b = 3; max(a, b) }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_pre_item_test_max4_$(NUM_UUID)(a: i32,
                                                              b: i32) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { a > b };
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_post_item_test_max4_$(NUM_UUID)(a: i32, b: i32,
                                                               result: i32) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { result == max(a, b) };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test_max4(a: i32, b: i32) -> i32 { a }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_pre_item_test_max5_$(NUM_UUID)(a: i32,
                                                              b: i32) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { a < b };
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_post_item_test_max5_$(NUM_UUID)(a: i32, b: i32,
                                                               result: i32) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { result == max(a, b) };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test_max5(a: i32, b: i32) -> i32 { a }
fn main() { }
Procedure(ProcedureSpecification { pres: [], posts: [], pledges: [], predicate_body: None, pure: true, trusted: false })
Procedure(ProcedureSpecification { pres: [], posts: [], pledges: [], predicate_body: None, pure: true, trusted: false })
Procedure(ProcedureSpecification { pres: [], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:10 ~ pure[$(CRATE_ID)]::prusti_post_item_test_identity2_$(NUM_UUID)::{closure#0}) }) }], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:20 ~ pure[$(CRATE_ID)]::prusti_pre_item_test_max4_$(NUM_UUID)::{closure#0}) }) }], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:22 ~ pure[$(CRATE_ID)]::prusti_post_item_test_max4_$(NUM_UUID)::{closure#0}) }) }], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:25 ~ pure[$(CRATE_ID)]::prusti_pre_item_test_max5_$(NUM_UUID)::{closure#0}) }) }], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:27 ~ pure[$(CRATE_ID)]::prusti_post_item_test_max5_$(NUM_UUID)::{closure#0}) }) }], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [], posts: [Assertion { kind: And([Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:14 ~ pure[$(CRATE_ID)]::prusti_post_item_test_max3_$(NUM_UUID)::{closure#0}) }) }, Assertion { kind: Implies(Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:15 ~ pure[$(CRATE_ID)]::prusti_post_item_test_max3_$(NUM_UUID)::{closure#1}) }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: DefId(0:16 ~ pure[$(CRATE_ID)]::prusti_post_item_test_max3_$(NUM_UUID)::{closure#2}) }) }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: DefId(0:17 ~ pure[$(CRATE_ID)]::prusti_post_item_test_max3_$(NUM_UUID)::{closure#3}) }) }]) }], pledges: [], predicate_body: None, pure: false, trusted: false })
