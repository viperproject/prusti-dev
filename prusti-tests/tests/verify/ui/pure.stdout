// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Phide_uuids=true -Poptimizations=none
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"










// test that we get correct span information






#![feature(type_ascription)]
#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[prusti::pure]
fn identity(x: u32) -> u32 { x }
fn test_identity1() {
    if !(5 == identity(5)) {
            ::core::panicking::panic("assertion failed: 5 == identity(5)")
        };
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_post_item_test_identity2_$(NUM_UUID)(result:
        ()) -> bool {
    !!((6 == identity(6)): bool)
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test_identity2() {}
#[prusti::pure]
fn max(a: i32, b: i32) -> i32 { if a > b { a } else { b } }
fn test_max1() {
    let a = 5;
    let b = 6;
    let z = max(a, b);
    if !(z == 6) { ::core::panicking::panic("assertion failed: z == 6") };
}
fn test_max2() {
    let a = 5;
    let b = 6;
    let z = max(a, b);
    if !(z == 5) { ::core::panicking::panic("assertion failed: z == 5") };
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_post_item_test_max3_$(NUM_UUID)(result: i32)
    -> bool {
    !!((true && ((!(true) || (result == 3))) && (true || false)): bool)
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test_max3() -> i32 { let a = 4; let b = 3; max(a, b) }
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test_max4_$(NUM_UUID)(a: i32, b: i32)
    -> bool {
    !!((a > b): bool)
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_post_item_test_max4_$(NUM_UUID)(a: i32, b: i32,
    result: i32) -> bool {
    !!((result == max(a, b)): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test_max4(a: i32, b: i32) -> i32 { a }
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test_max5_$(NUM_UUID)(a: i32, b: i32)
    -> bool {
    !!((a < b): bool)
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_post_item_test_max5_$(NUM_UUID)(a: i32, b: i32,
    result: i32) -> bool {
    !!((result == max(a, b)): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test_max5(a: i32, b: i32) -> i32 { a }
fn main() {}
ProcedureSpecification { span: Some($DIR/pure.rs:9:1: 9:27 (#0)), kind: Inherent(Pure), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/pure.rs:20:1: 20:30 (#0)), kind: Inherent(Pure), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/pure.rs:54:1: 54:22 (#0)), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:12 ~ pure[$(CRATE_ID)]::prusti_post_item_test_max3_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/pure.rs:16:1: 16:20 (#0)), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:9 ~ pure[$(CRATE_ID)]::prusti_post_item_test_identity2_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/pure.rs:62:1: 62:36 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:14 ~ pure[$(CRATE_ID)]::prusti_pre_item_test_max4_$(NUM_UUID))]), posts: Inherent([DefId(0:15 ~ pure[$(CRATE_ID)]::prusti_post_item_test_max4_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/pure.rs:68:1: 68:36 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:17 ~ pure[$(CRATE_ID)]::prusti_pre_item_test_max5_$(NUM_UUID))]), posts: Inherent([DefId(0:18 ~ pure[$(CRATE_ID)]::prusti_post_item_test_max5_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) }
