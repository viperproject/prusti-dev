// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Phide_uuids=true -Poptimizations=none
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"
// normalize-stdout-test: "#/[prusti::specs_version = /x22.+/x22/]" -> "#[prusti::specs_version = $(SPECS_VERSION)]"










// test that we get correct span information






#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[prusti::pure]
#[prusti::specs_version = $(SPECS_VERSION)]
fn identity(x: u32) -> u32 { x }
fn test_identity1() {
    if !(5 == identity(5)) {
            ::core::panicking::panic("assertion failed: 5 == identity(5)")
        };
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_post_item_test_identity2_$(NUM_UUID)(result:
        ()) -> bool {
    let prusti_result: bool = 6 == identity(6);
    prusti_result
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test_identity2() {}
#[prusti::pure]
#[prusti::specs_version = $(SPECS_VERSION)]
fn max(a: i32, b: i32) -> i32 { if a > b { a } else { b } }
fn test_max1() {
    let a = 5;
    let b = 6;
    let z = max(a, b);
    if !(z == 6) { ::core::panicking::panic("assertion failed: z == 6") };
}
fn test_max2() {
    let a = 5;
    let b = 6;
    let z = max(a, b);
    if !(z == 5) { ::core::panicking::panic("assertion failed: z == 5") };
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_post_item_test_max3_$(NUM_UUID)(result: i32)
    -> bool {
    let prusti_result: bool =
        ((true) &&
                    ((if (true) {
                                    let rhs: bool = (result == 3);
                                    rhs
                                } else { true }))) && (((true) || (false)));
    prusti_result
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test_max3() -> i32 { let a = 4; let b = 3; max(a, b) }
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test_max4_$(NUM_UUID)(a: i32, b: i32)
    -> bool {
    let prusti_result: bool = a > b;
    prusti_result
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_post_item_test_max4_$(NUM_UUID)(a: i32, b: i32,
    result: i32) -> bool {
    let prusti_result: bool = result == max(a, b);
    prusti_result
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test_max4(a: i32, b: i32) -> i32 { a }
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test_max5_$(NUM_UUID)(a: i32, b: i32)
    -> bool {
    let prusti_result: bool = a < b;
    prusti_result
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_post_item_test_max5_$(NUM_UUID)(a: i32, b: i32,
    result: i32) -> bool {
    let prusti_result: bool = result == max(a, b);
    prusti_result
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test_max5(a: i32, b: i32) -> i32 { a }
fn main() {}
ProcedureSpecification { source: DefId(0:11 ~ pure[$(CRATE_ID)]::max), kind: Inherent(Pure), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:8 ~ pure[$(CRATE_ID)]::identity), kind: Inherent(Pure), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:13 ~ pure[$(CRATE_ID)]::test_max3), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:12 ~ pure[$(CRATE_ID)]::prusti_post_item_test_max3_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:10 ~ pure[$(CRATE_ID)]::test_identity2), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:9 ~ pure[$(CRATE_ID)]::prusti_post_item_test_identity2_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:16 ~ pure[$(CRATE_ID)]::test_max4), kind: Inherent(Impure), pres: Inherent([DefId(0:14 ~ pure[$(CRATE_ID)]::prusti_pre_item_test_max4_$(NUM_UUID))]), posts: Inherent([DefId(0:15 ~ pure[$(CRATE_ID)]::prusti_post_item_test_max4_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:19 ~ pure[$(CRATE_ID)]::test_max5), kind: Inherent(Impure), pres: Inherent([DefId(0:17 ~ pure[$(CRATE_ID)]::prusti_pre_item_test_max5_$(NUM_UUID))]), posts: Inherent([DefId(0:18 ~ pure[$(CRATE_ID)]::prusti_post_item_test_max5_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
