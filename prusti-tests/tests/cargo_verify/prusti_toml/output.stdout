


#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "[..]"]
#[prusti::assertion =
  "{\"kind\":{\"Expr\":{\"spec_id\":\"[..]\",\"expr_id\":101}}}"]
fn prusti_post_item_test1_[..](result: ()) {

    #[prusti::spec_only]
    #[prusti::expr_id = "[..]_101"]
    || -> bool { false };
}
#[prusti::post_spec_id_ref = "[..]"]
pub fn test1() { }
pub fn test2() {
    if !false { ::core::panicking::panic("assertion failed: false") };
}
pub fn test3(x: usize) { let _y: usize = 1 - x; }
Procedure(ProcedureSpecification { pres: [], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:7 ~ prusti_toml[[..]]::prusti_post_item_test1_$(NUM_UUID)::{closure#0}) }) }], pledges: [], predicate_body: None, pure: false, trusted: false })
