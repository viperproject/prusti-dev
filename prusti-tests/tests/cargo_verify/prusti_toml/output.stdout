


#![feature(type_ascription)]
#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "[..]"]
fn prusti_post_item_test1_[..](result: ())
    -> bool {
    !!((false): bool)
}
#[prusti::post_spec_id_ref = "[..]"]
#[prusti::specs_version = "[..]"]
pub fn test1() {}
pub fn test2() {
    if !false { ::core::panicking::panic("assertion failed: false") };
}
pub fn test3(x: usize) { let _y: usize = 1 - x; }
ProcedureSpecification { source: DefId(0:7 ~ prusti_toml[..]::test1), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:6 ~ prusti_toml[..]::prusti_post_item_test1_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
