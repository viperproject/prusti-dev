// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"
// normalize-stdout-test: "#/[prusti::specs_version = /x22.+/x22/]" -> "#[prusti::specs_version = $(SPECS_VERSION)]"




#![feature(type_ascription)]
#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[prusti::trusted]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test1() {}
#[prusti::specs_version = $(SPECS_VERSION)]
struct Test2 {
    x: i32,
}
impl Test2<> {
    #[allow(unused_variables, dead_code, non_snake_case)]
    #[prusti::spec_only]
    #[prusti::trusted_type]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_trusted_item_Test2_$(NUM_UUID)(self) {}
}
fn main() {}
TypeSpecification { source: DefId(0:7 ~ trusted[$(CRATE_ID)]::Test2), invariant: Inherent([]), trusted: Inherent(true), model: None, counterexample_print: [] }
ProcedureSpecification { source: DefId(0:5 ~ trusted[$(CRATE_ID)]::test1), kind: Inherent(Impure), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(true), terminates: Inherent(None), purity: Inherent(None) }
