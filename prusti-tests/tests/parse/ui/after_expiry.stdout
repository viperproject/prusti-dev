// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"







#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}}"]
fn prusti_post_item_test1_$(NUM_UUID)(a: bool,
                                                           result: ()) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_102"]
    || -> bool { a };
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":103}}}"]
fn prusti_post_item_test1_$(NUM_UUID)(a: bool,
                                                           result: ()) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_103"]
    || -> bool { a };
}
#[prusti::pledge_spec_id_ref =
  "$(NUM_UUID):$(NUM_UUID)"]
fn test1(a: bool) { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_post_item_test2_$(NUM_UUID)(a: bool,
                                                           result: ()) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { a };
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}}"]
fn prusti_post_item_test2_$(NUM_UUID)(a: bool,
                                                           result: ()) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_102"]
    || -> bool { a };
}
#[prusti::pledge_spec_id_ref =
  "$(NUM_UUID):$(NUM_UUID)"]
fn test2(a: bool) { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_post_item_test3_$(NUM_UUID)(a: bool,
                                                           result: ()) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { a };
}
#[prusti::pledge_spec_id_ref = ":$(NUM_UUID)"]
fn test3(a: bool) { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}}"]
fn prusti_post_item_test4_$(NUM_UUID)(a: bool,
                                                           result: ()) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_102"]
    || -> bool { a };
}
#[prusti::pledge_spec_id_ref = ":$(NUM_UUID)"]
fn test4(a: bool) { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_post_item_test5_$(NUM_UUID)(x: u32,
                                                           result: u32) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { result == match x { 1 => 1, 2 => 2, _ => 0, } };
}
#[prusti::pledge_spec_id_ref = ":$(NUM_UUID)"]
fn test5(x: u32) -> u32 { 1 }
fn main() { }
Procedure(ProcedureSpecification { pres: [], posts: [], pledges: [Pledge { reference: None, lhs: None, rhs: Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:16 ~ after_expiry[$(CRATE_ID)]::prusti_post_item_test3_$(NUM_UUID)::{closure#0}) }) } }], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [], posts: [], pledges: [Pledge { reference: None, lhs: None, rhs: Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:22 ~ after_expiry[$(CRATE_ID)]::prusti_post_item_test5_$(NUM_UUID)::{closure#0}) }) } }], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [], posts: [], pledges: [Pledge { reference: None, lhs: None, rhs: Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:19 ~ after_expiry[$(CRATE_ID)]::prusti_post_item_test4_$(NUM_UUID)::{closure#0}) }) } }], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [], posts: [], pledges: [Pledge { reference: None, lhs: Some(Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:6 ~ after_expiry[$(CRATE_ID)]::prusti_post_item_test1_$(NUM_UUID)::{closure#0}) }) }), rhs: Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: DefId(0:8 ~ after_expiry[$(CRATE_ID)]::prusti_post_item_test1_$(NUM_UUID)::{closure#0}) }) } }], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [], posts: [], pledges: [Pledge { reference: None, lhs: Some(Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:11 ~ after_expiry[$(CRATE_ID)]::prusti_post_item_test2_$(NUM_UUID)::{closure#0}) }) }), rhs: Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:13 ~ after_expiry[$(CRATE_ID)]::prusti_post_item_test2_$(NUM_UUID)::{closure#0}) }) } }], predicate_body: None, pure: false, trusted: false })
