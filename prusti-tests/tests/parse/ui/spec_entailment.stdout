// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"







#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
/// Tests for specification entailment parsing.
use prusti_contracts::*;
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"SpecEntailment/":{/"closure/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101},/"arg_binders/":{/"spec_id/":/"$(UUID)/",/"pre_expr_id/":102,/"post_expr_id/":103,/"arg_count/":1},/"pres/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":104}}}],/"posts/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":105}}}]}}}"]
fn prusti_pre_item_test1_$(NUM_UUID)<F: Fn(i32)
                                                          -> i32>(f: F) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || { f };

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_102"]
    |i: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_104"]
            || -> bool { i >= 5 };
        };

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_103"]
    |i: i32, result: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_105"]
            || -> bool { result >= 6 };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test1<F: Fn(i32) -> i32>(f: F) { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"SpecEntailment/":{/"closure/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101},/"arg_binders/":{/"spec_id/":/"$(UUID)/",/"pre_expr_id/":102,/"post_expr_id/":103,/"arg_count/":1},/"pres/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":104}}}],/"posts/":[]}}}"]
fn prusti_pre_item_test2_$(NUM_UUID)<F: Fn(i32)
                                                          -> i32>(g: F) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || { g };

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_102"]
    |i: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_104"]
            || -> bool { true };
        };

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_103"]
    |i: i32, result: i32| { };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test2<F: Fn(i32) -> i32>(g: F) { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"SpecEntailment/":{/"closure/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101},/"arg_binders/":{/"spec_id/":/"$(UUID)/",/"pre_expr_id/":102,/"post_expr_id/":103,/"arg_count/":1},/"pres/":[],/"posts/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":104}}}]}}}"]
fn prusti_pre_item_test3_$(NUM_UUID)<F: Fn(i32)
                                                          -> i32>(f: F) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || { f };

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_102"]
    |i: i32| { };

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_103"]
    |i: i32, result: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_104"]
            || -> bool { true };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test3<F: Fn(i32) -> i32>(f: F) { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"SpecEntailment/":{/"closure/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101},/"arg_binders/":{/"spec_id/":/"$(UUID)/",/"pre_expr_id/":102,/"post_expr_id/":103,/"arg_count/":2},/"pres/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":104}}}],/"posts/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":105}}}]}}}"]
fn prusti_pre_item_test4_$(NUM_UUID)<F: Fn(i32, i32)
                                                          -> i32>(f: F) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || { f };

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_102"]
    |i: i32, j: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_104"]
            || -> bool { i + j == 0 };
        };

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_103"]
    |i: i32, j: i32, result: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_105"]
            || -> bool { true };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test4<F: Fn(i32, i32) -> i32>(f: F) { }
fn main() { }
Procedure(ProcedureSpecification { pres: [Assertion { kind: SpecEntailment { closure: Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:16 ~ spec_entailment[$(CRATE_ID)]::prusti_pre_item_test2_$(NUM_UUID)::{closure#0}) }, arg_binders: SpecEntailmentVars { spec_id: SpecificationId($(UUID)), pre_id: ExpressionId(102), post_id: ExpressionId(103), args: [(_2, i32)], result: (_3, i32) }, pres: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: DefId(0:18 ~ spec_entailment[$(CRATE_ID)]::prusti_pre_item_test2_$(NUM_UUID)::{closure#1}::{closure#0}) }) }], posts: [] } }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: SpecEntailment { closure: Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:24 ~ spec_entailment[$(CRATE_ID)]::prusti_pre_item_test3_$(NUM_UUID)::{closure#0}) }, arg_binders: SpecEntailmentVars { spec_id: SpecificationId($(UUID)), pre_id: ExpressionId(102), post_id: ExpressionId(103), args: [(_2, i32)], result: (_3, i32) }, pres: [], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: DefId(0:27 ~ spec_entailment[$(CRATE_ID)]::prusti_pre_item_test3_$(NUM_UUID)::{closure#2}::{closure#0}) }) }] } }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: SpecEntailment { closure: Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:7 ~ spec_entailment[$(CRATE_ID)]::prusti_pre_item_test1_$(NUM_UUID)::{closure#0}) }, arg_binders: SpecEntailmentVars { spec_id: SpecificationId($(UUID)), pre_id: ExpressionId(102), post_id: ExpressionId(103), args: [(_2, i32)], result: (_3, i32) }, pres: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: DefId(0:9 ~ spec_entailment[$(CRATE_ID)]::prusti_pre_item_test1_$(NUM_UUID)::{closure#1}::{closure#0}) }) }], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(105), expr: DefId(0:11 ~ spec_entailment[$(CRATE_ID)]::prusti_pre_item_test1_$(NUM_UUID)::{closure#2}::{closure#0}) }) }] } }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: SpecEntailment { closure: Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:32 ~ spec_entailment[$(CRATE_ID)]::prusti_pre_item_test4_$(NUM_UUID)::{closure#0}) }, arg_binders: SpecEntailmentVars { spec_id: SpecificationId($(UUID)), pre_id: ExpressionId(102), post_id: ExpressionId(103), args: [(_2, i32), (_3, i32)], result: (_4, i32) }, pres: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: DefId(0:34 ~ spec_entailment[$(CRATE_ID)]::prusti_pre_item_test4_$(NUM_UUID)::{closure#1}::{closure#0}) }) }], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(105), expr: DefId(0:36 ~ spec_entailment[$(CRATE_ID)]::prusti_pre_item_test4_$(NUM_UUID)::{closure#2}::{closure#0}) }) }] } }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
