// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"
// normalize-stdout-test: "#/[prusti::specs_version = /x22.+/x22/]" -> "#[prusti::specs_version = $(SPECS_VERSION)]"






















#![feature(type_ascription)]
#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
trait Test1 {
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code,
    non_snake_case)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_pre_item_test1_$(NUM_UUID)() -> bool {
        !!((true): bool)
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::specs_version = $(SPECS_VERSION)]
    fn test1() {}
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code,
    non_snake_case)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_post_item_test2_$(NUM_UUID)(result: ())
        -> bool {
        !!((true): bool)
    }
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::specs_version = $(SPECS_VERSION)]
    fn test2() {}
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code,
    non_snake_case)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_pre_item_test3_$(NUM_UUID)() -> bool {
        !!((true): bool)
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::specs_version = $(SPECS_VERSION)]
    fn test3();
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code,
    non_snake_case)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_post_item_test4_$(NUM_UUID)(result: ())
        -> bool {
        !!((true): bool)
    }
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::specs_version = $(SPECS_VERSION)]
    fn test4();
}
trait Test2 {
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code,
    non_snake_case)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_pre_item_test1_$(NUM_UUID)() -> bool {
        !!((true): bool)
    }
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code,
    non_snake_case)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_post_item_test1_$(NUM_UUID)(result: ())
        -> bool {
        !!((true): bool)
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::specs_version = $(SPECS_VERSION)]
    fn test1() {}
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code,
    non_snake_case)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_pre_item_test2_$(NUM_UUID)() -> bool {
        !!((true): bool)
    }
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code,
    non_snake_case)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_post_item_test2_$(NUM_UUID)(result: ())
        -> bool {
        !!((true): bool)
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::specs_version = $(SPECS_VERSION)]
    fn test2();
}
trait Test3 {
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code,
    non_snake_case)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_pre_item_test1_$(NUM_UUID)(&self) -> bool {
        !!((true): bool)
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::specs_version = $(SPECS_VERSION)]
    fn test1(&self) {}
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code,
    non_snake_case)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_post_item_test2_$(NUM_UUID)(&self,
        result: ()) -> bool {
        !!((true): bool)
    }
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::specs_version = $(SPECS_VERSION)]
    fn test2(&self) {}
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code,
    non_snake_case)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_pre_item_test3_$(NUM_UUID)(&self) -> bool {
        !!((true): bool)
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::specs_version = $(SPECS_VERSION)]
    fn test3(&self);
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code,
    non_snake_case)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_post_item_test4_$(NUM_UUID)(&self,
        result: ()) -> bool {
        !!((true): bool)
    }
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::specs_version = $(SPECS_VERSION)]
    fn test4(&self);
}
trait Test4 {
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code,
    non_snake_case)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_pre_item_test1_$(NUM_UUID)(&self) -> bool {
        !!((true): bool)
    }
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code,
    non_snake_case)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_post_item_test1_$(NUM_UUID)(&self,
        result: ()) -> bool {
        !!((true): bool)
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::specs_version = $(SPECS_VERSION)]
    fn test1(&self) {}
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code,
    non_snake_case)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_pre_item_test2_$(NUM_UUID)(&self) -> bool {
        !!((true): bool)
    }
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code,
    non_snake_case)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_post_item_test2_$(NUM_UUID)(&self,
        result: ()) -> bool {
        !!((true): bool)
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::specs_version = $(SPECS_VERSION)]
    fn test2(&self);
}
fn main() {}
ProcedureSpecification { source: DefId(0:10 ~ traits[$(CRATE_ID)]::Test1::test1), kind: Inherent(Impure), pres: Inherent([DefId(0:9 ~ traits[$(CRATE_ID)]::Test1::prusti_pre_item_test1_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:14 ~ traits[$(CRATE_ID)]::Test1::test3), kind: Inherent(Impure), pres: Inherent([DefId(0:13 ~ traits[$(CRATE_ID)]::Test1::prusti_pre_item_test3_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:24 ~ traits[$(CRATE_ID)]::Test3::test1), kind: Inherent(Impure), pres: Inherent([DefId(0:23 ~ traits[$(CRATE_ID)]::Test3::prusti_pre_item_test1_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:28 ~ traits[$(CRATE_ID)]::Test3::test3), kind: Inherent(Impure), pres: Inherent([DefId(0:27 ~ traits[$(CRATE_ID)]::Test3::prusti_pre_item_test3_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:12 ~ traits[$(CRATE_ID)]::Test1::test2), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:11 ~ traits[$(CRATE_ID)]::Test1::prusti_post_item_test2_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:16 ~ traits[$(CRATE_ID)]::Test1::test4), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:15 ~ traits[$(CRATE_ID)]::Test1::prusti_post_item_test4_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:26 ~ traits[$(CRATE_ID)]::Test3::test2), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:25 ~ traits[$(CRATE_ID)]::Test3::prusti_post_item_test2_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:30 ~ traits[$(CRATE_ID)]::Test3::test4), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:29 ~ traits[$(CRATE_ID)]::Test3::prusti_post_item_test4_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:19 ~ traits[$(CRATE_ID)]::Test2::test1), kind: Inherent(Impure), pres: Inherent([DefId(0:17 ~ traits[$(CRATE_ID)]::Test2::prusti_pre_item_test1_$(NUM_UUID))]), posts: Inherent([DefId(0:18 ~ traits[$(CRATE_ID)]::Test2::prusti_post_item_test1_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:22 ~ traits[$(CRATE_ID)]::Test2::test2), kind: Inherent(Impure), pres: Inherent([DefId(0:20 ~ traits[$(CRATE_ID)]::Test2::prusti_pre_item_test2_$(NUM_UUID))]), posts: Inherent([DefId(0:21 ~ traits[$(CRATE_ID)]::Test2::prusti_post_item_test2_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:33 ~ traits[$(CRATE_ID)]::Test4::test1), kind: Inherent(Impure), pres: Inherent([DefId(0:31 ~ traits[$(CRATE_ID)]::Test4::prusti_pre_item_test1_$(NUM_UUID))]), posts: Inherent([DefId(0:32 ~ traits[$(CRATE_ID)]::Test4::prusti_post_item_test1_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:36 ~ traits[$(CRATE_ID)]::Test4::test2), kind: Inherent(Impure), pres: Inherent([DefId(0:34 ~ traits[$(CRATE_ID)]::Test4::prusti_pre_item_test2_$(NUM_UUID))]), posts: Inherent([DefId(0:35 ~ traits[$(CRATE_ID)]::Test4::prusti_post_item_test2_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
