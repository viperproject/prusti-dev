// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"






















#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
trait Test1 {
    #[allow(unused_must_use, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    #[prusti::assertion =
      "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
    fn prusti_pre_item_test1_$(NUM_UUID)() {

        #[prusti::spec_only]
        #[prusti::expr_id = "$(NUM_UUID)_101"]
        || -> bool { true };
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    fn test1() { }
    #[allow(unused_must_use, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    #[prusti::assertion =
      "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
    fn prusti_post_item_test2_$(NUM_UUID)(result: ()) {

        #[prusti::spec_only]
        #[prusti::expr_id = "$(NUM_UUID)_101"]
        || -> bool { true };
    }
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    fn test2() { }
    #[allow(unused_must_use, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    #[prusti::assertion =
      "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
    fn prusti_pre_item_test3_$(NUM_UUID)() {

        #[prusti::spec_only]
        #[prusti::expr_id = "$(NUM_UUID)_101"]
        || -> bool { true };
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    fn test3();
    #[allow(unused_must_use, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    #[prusti::assertion =
      "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
    fn prusti_post_item_test4_$(NUM_UUID)(result: ()) {

        #[prusti::spec_only]
        #[prusti::expr_id = "$(NUM_UUID)_101"]
        || -> bool { true };
    }
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    fn test4();
}
trait Test2 {
    #[allow(unused_must_use, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    #[prusti::assertion =
      "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
    fn prusti_pre_item_test1_$(NUM_UUID)() {

        #[prusti::spec_only]
        #[prusti::expr_id = "$(NUM_UUID)_101"]
        || -> bool { true };
    }
    #[allow(unused_must_use, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    #[prusti::assertion =
      "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
    fn prusti_post_item_test1_$(NUM_UUID)(result: ()) {

        #[prusti::spec_only]
        #[prusti::expr_id = "$(NUM_UUID)_101"]
        || -> bool { true };
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    fn test1() { }
    #[allow(unused_must_use, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    #[prusti::assertion =
      "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
    fn prusti_pre_item_test2_$(NUM_UUID)() {

        #[prusti::spec_only]
        #[prusti::expr_id = "$(NUM_UUID)_101"]
        || -> bool { true };
    }
    #[allow(unused_must_use, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    #[prusti::assertion =
      "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
    fn prusti_post_item_test2_$(NUM_UUID)(result: ()) {

        #[prusti::spec_only]
        #[prusti::expr_id = "$(NUM_UUID)_101"]
        || -> bool { true };
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    fn test2();
}
trait Test3 {
    #[allow(unused_must_use, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    #[prusti::assertion =
      "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
    fn prusti_pre_item_test1_$(NUM_UUID)(&self) {

        #[prusti::spec_only]
        #[prusti::expr_id = "$(NUM_UUID)_101"]
        || -> bool { true };
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    fn test1(&self) { }
    #[allow(unused_must_use, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    #[prusti::assertion =
      "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
    fn prusti_post_item_test2_$(NUM_UUID)(&self,
                                                               result: ()) {

        #[prusti::spec_only]
        #[prusti::expr_id = "$(NUM_UUID)_101"]
        || -> bool { true };
    }
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    fn test2(&self) { }
    #[allow(unused_must_use, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    #[prusti::assertion =
      "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
    fn prusti_pre_item_test3_$(NUM_UUID)(&self) {

        #[prusti::spec_only]
        #[prusti::expr_id = "$(NUM_UUID)_101"]
        || -> bool { true };
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    fn test3(&self);
    #[allow(unused_must_use, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    #[prusti::assertion =
      "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
    fn prusti_post_item_test4_$(NUM_UUID)(&self,
                                                               result: ()) {

        #[prusti::spec_only]
        #[prusti::expr_id = "$(NUM_UUID)_101"]
        || -> bool { true };
    }
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    fn test4(&self);
}
trait Test4 {
    #[allow(unused_must_use, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    #[prusti::assertion =
      "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
    fn prusti_pre_item_test1_$(NUM_UUID)(&self) {

        #[prusti::spec_only]
        #[prusti::expr_id = "$(NUM_UUID)_101"]
        || -> bool { true };
    }
    #[allow(unused_must_use, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    #[prusti::assertion =
      "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
    fn prusti_post_item_test1_$(NUM_UUID)(&self,
                                                               result: ()) {

        #[prusti::spec_only]
        #[prusti::expr_id = "$(NUM_UUID)_101"]
        || -> bool { true };
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    fn test1(&self) { }
    #[allow(unused_must_use, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    #[prusti::assertion =
      "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
    fn prusti_pre_item_test2_$(NUM_UUID)(&self) {

        #[prusti::spec_only]
        #[prusti::expr_id = "$(NUM_UUID)_101"]
        || -> bool { true };
    }
    #[allow(unused_must_use, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    #[prusti::assertion =
      "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
    fn prusti_post_item_test2_$(NUM_UUID)(&self,
                                                               result: ()) {

        #[prusti::spec_only]
        #[prusti::expr_id = "$(NUM_UUID)_101"]
        || -> bool { true };
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    fn test2(&self);
}
fn main() { }
Procedure(ProcedureSpecification { pres: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:10 ~ traits[$(CRATE_ID)]::Test1::prusti_pre_item_test1_$(NUM_UUID)::{closure#0}) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:16 ~ traits[$(CRATE_ID)]::Test1::prusti_pre_item_test3_$(NUM_UUID)::{closure#0}) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:32 ~ traits[$(CRATE_ID)]::Test3::prusti_pre_item_test1_$(NUM_UUID)::{closure#0}) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:38 ~ traits[$(CRATE_ID)]::Test3::prusti_pre_item_test3_$(NUM_UUID)::{closure#0}) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:13 ~ traits[$(CRATE_ID)]::Test1::prusti_post_item_test2_$(NUM_UUID)::{closure#0}) }) }], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:19 ~ traits[$(CRATE_ID)]::Test1::prusti_post_item_test4_$(NUM_UUID)::{closure#0}) }) }], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:35 ~ traits[$(CRATE_ID)]::Test3::prusti_post_item_test2_$(NUM_UUID)::{closure#0}) }) }], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:41 ~ traits[$(CRATE_ID)]::Test3::prusti_post_item_test4_$(NUM_UUID)::{closure#0}) }) }], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:22 ~ traits[$(CRATE_ID)]::Test2::prusti_pre_item_test1_$(NUM_UUID)::{closure#0}) }) }], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:24 ~ traits[$(CRATE_ID)]::Test2::prusti_post_item_test1_$(NUM_UUID)::{closure#0}) }) }], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:27 ~ traits[$(CRATE_ID)]::Test2::prusti_pre_item_test2_$(NUM_UUID)::{closure#0}) }) }], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:29 ~ traits[$(CRATE_ID)]::Test2::prusti_post_item_test2_$(NUM_UUID)::{closure#0}) }) }], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:44 ~ traits[$(CRATE_ID)]::Test4::prusti_pre_item_test1_$(NUM_UUID)::{closure#0}) }) }], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:46 ~ traits[$(CRATE_ID)]::Test4::prusti_post_item_test1_$(NUM_UUID)::{closure#0}) }) }], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:49 ~ traits[$(CRATE_ID)]::Test4::prusti_pre_item_test2_$(NUM_UUID)::{closure#0}) }) }], posts: [Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:51 ~ traits[$(CRATE_ID)]::Test4::prusti_post_item_test2_$(NUM_UUID)::{closure#0}) }) }], pledges: [], predicate_body: None, pure: false, trusted: false })
