// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"






















#![feature(type_ascription)]
#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
trait Test1 {
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_pre_item_test1_$(NUM_UUID)() -> bool {
        !!((true): bool)
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    fn test1() {}
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_post_item_test2_$(NUM_UUID)(result: ())
        -> bool {
        !!((true): bool)
    }
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    fn test2() {}
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_pre_item_test3_$(NUM_UUID)() -> bool {
        !!((true): bool)
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    fn test3();
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_post_item_test4_$(NUM_UUID)(result: ())
        -> bool {
        !!((true): bool)
    }
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    fn test4();
}
trait Test2 {
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_pre_item_test1_$(NUM_UUID)() -> bool {
        !!((true): bool)
    }
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_post_item_test1_$(NUM_UUID)(result: ())
        -> bool {
        !!((true): bool)
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    fn test1() {}
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_pre_item_test2_$(NUM_UUID)() -> bool {
        !!((true): bool)
    }
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_post_item_test2_$(NUM_UUID)(result: ())
        -> bool {
        !!((true): bool)
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    fn test2();
}
trait Test3 {
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_pre_item_test1_$(NUM_UUID)(&self) -> bool {
        !!((true): bool)
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    fn test1(&self) {}
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_post_item_test2_$(NUM_UUID)(&self,
        result: ()) -> bool {
        !!((true): bool)
    }
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    fn test2(&self) {}
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_pre_item_test3_$(NUM_UUID)(&self) -> bool {
        !!((true): bool)
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    fn test3(&self);
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_post_item_test4_$(NUM_UUID)(&self,
        result: ()) -> bool {
        !!((true): bool)
    }
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    fn test4(&self);
}
trait Test4 {
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_pre_item_test1_$(NUM_UUID)(&self) -> bool {
        !!((true): bool)
    }
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_post_item_test1_$(NUM_UUID)(&self,
        result: ()) -> bool {
        !!((true): bool)
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    fn test1(&self) {}
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_pre_item_test2_$(NUM_UUID)(&self) -> bool {
        !!((true): bool)
    }
    #[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
    #[prusti::spec_only]
    #[prusti::spec_id = "$(NUM_UUID)"]
    fn prusti_post_item_test2_$(NUM_UUID)(&self,
        result: ()) -> bool {
        !!((true): bool)
    }
    #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
    #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
    fn test2(&self);
}
fn main() {}
ProcedureSpecification { span: Some($DIR/traits.rs:11:5: 11:15 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:9 ~ traits[$(CRATE_ID)]::Test1::prusti_pre_item_test1_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/traits.rs:17:5: 17:16 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:13 ~ traits[$(CRATE_ID)]::Test1::prusti_pre_item_test3_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/traits.rs:39:5: 39:20 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:23 ~ traits[$(CRATE_ID)]::Test3::prusti_pre_item_test1_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/traits.rs:45:5: 45:21 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:27 ~ traits[$(CRATE_ID)]::Test3::prusti_pre_item_test3_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/traits.rs:14:5: 14:15 (#0)), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:11 ~ traits[$(CRATE_ID)]::Test1::prusti_post_item_test2_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/traits.rs:20:5: 20:16 (#0)), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:15 ~ traits[$(CRATE_ID)]::Test1::prusti_post_item_test4_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/traits.rs:42:5: 42:20 (#0)), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:25 ~ traits[$(CRATE_ID)]::Test3::prusti_post_item_test2_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/traits.rs:48:5: 48:21 (#0)), kind: Inherent(Impure), pres: Empty, posts: Inherent([DefId(0:29 ~ traits[$(CRATE_ID)]::Test3::prusti_post_item_test4_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/traits.rs:28:5: 28:15 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:17 ~ traits[$(CRATE_ID)]::Test2::prusti_pre_item_test1_$(NUM_UUID))]), posts: Inherent([DefId(0:18 ~ traits[$(CRATE_ID)]::Test2::prusti_post_item_test1_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/traits.rs:32:5: 32:16 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:20 ~ traits[$(CRATE_ID)]::Test2::prusti_pre_item_test2_$(NUM_UUID))]), posts: Inherent([DefId(0:21 ~ traits[$(CRATE_ID)]::Test2::prusti_post_item_test2_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/traits.rs:56:5: 56:20 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:31 ~ traits[$(CRATE_ID)]::Test4::prusti_pre_item_test1_$(NUM_UUID))]), posts: Inherent([DefId(0:32 ~ traits[$(CRATE_ID)]::Test4::prusti_post_item_test1_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/traits.rs:60:5: 60:21 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:34 ~ traits[$(CRATE_ID)]::Test4::prusti_pre_item_test2_$(NUM_UUID))]), posts: Inherent([DefId(0:35 ~ traits[$(CRATE_ID)]::Test4::prusti_post_item_test2_$(NUM_UUID))]), pledges: Empty, trusted: Inherent(false) }
