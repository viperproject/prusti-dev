// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"









#![feature(type_ascription)]
#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
/// Tests for predicate parsing and desugaring
use prusti_contracts::*;
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pred_item_pred1_$(NUM_UUID)(a: bool) -> bool {
    !!((forall((),
                            #[prusti::spec_only] |b: bool| -> bool
                                { ((a == b): bool) })): bool)
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::pred_spec_id_ref = "$(NUM_UUID)"]
fn pred1(a: bool) -> bool {
    ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["not implemented: "],
            &[::core::fmt::ArgumentV1::new_display(&::core::fmt::Arguments::new_v1(&["predicate"],
                                    &[]))]))
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_use_pred1_$(NUM_UUID)() -> bool {
    !!((pred1(true)): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn use_pred1() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pred_item_pred2_$(NUM_UUID)(a: bool) -> bool {
    !!((exists((),
                            #[prusti::spec_only] |b: bool| -> bool
                                { ((a == b): bool) })): bool)
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::pred_spec_id_ref = "$(NUM_UUID)"]
fn pred2(a: bool) -> bool {
    ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["not implemented: "],
            &[::core::fmt::ArgumentV1::new_display(&::core::fmt::Arguments::new_v1(&["predicate"],
                                    &[]))]))
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_use_pred2_$(NUM_UUID)() -> bool {
    !!((pred2(true)): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn use_pred2() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pred_item_forall_implication_$(NUM_UUID)()
    -> bool {
    !!((forall((),
                            #[prusti::spec_only] |x: usize| -> bool
                                { (((!((x != 0)) || (x * 2 != 0))): bool) })): bool)
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::pred_spec_id_ref = "$(NUM_UUID)"]
fn forall_implication() -> bool {
    ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["not implemented: "],
            &[::core::fmt::ArgumentV1::new_display(&::core::fmt::Arguments::new_v1(&["predicate"],
                                    &[]))]))
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pred_item_exists_implication_$(NUM_UUID)()
    -> bool {
    !!((exists((),
                            #[prusti::spec_only] |x: usize| -> bool
                                { (((!((x != 0)) || (x * 2 != 0))): bool) })): bool)
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::pred_spec_id_ref = "$(NUM_UUID)"]
fn exists_implication() -> bool {
    ::core::panicking::panic_fmt(::core::fmt::Arguments::new_v1(&["not implemented: "],
            &[::core::fmt::ArgumentV1::new_display(&::core::fmt::Arguments::new_v1(&["predicate"],
                                    &[]))]))
}
fn main() {}
ProcedureSpecification { span: Some($DIR/predicates.rs:17:1: 17:15 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:8 ~ predicates[$(CRATE_ID)]::prusti_pre_item_use_pred1_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/predicates.rs:11:5: 11:30 (#0)), kind: Inherent(Predicate(Some(DefId(0:5 ~ predicates[$(CRATE_ID)]::prusti_pred_item_pred1_$(NUM_UUID))))), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/predicates.rs:26:1: 26:15 (#0)), kind: Inherent(Impure), pres: Inherent([DefId(0:13 ~ predicates[$(CRATE_ID)]::prusti_pre_item_use_pred2_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/predicates.rs:20:5: 20:30 (#0)), kind: Inherent(Predicate(Some(DefId(0:10 ~ predicates[$(CRATE_ID)]::prusti_pred_item_pred2_$(NUM_UUID))))), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/predicates.rs:29:5: 29:36 (#0)), kind: Inherent(Predicate(Some(DefId(0:15 ~ predicates[$(CRATE_ID)]::prusti_pred_item_forall_implication_$(NUM_UUID))))), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false) }
ProcedureSpecification { span: Some($DIR/predicates.rs:35:5: 35:36 (#0)), kind: Inherent(Predicate(Some(DefId(0:18 ~ predicates[$(CRATE_ID)]::prusti_pred_item_exists_implication_$(NUM_UUID))))), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false) }
