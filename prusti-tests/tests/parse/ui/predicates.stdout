// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"
// normalize-stdout-test: "#/[prusti::specs_version = /x22.+/x22/]" -> "#[prusti::specs_version = $(SPECS_VERSION)]"









#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
/// Tests for predicate parsing and desugaring
use prusti_contracts::*;
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pred_item_pred1_$(NUM_UUID)(a: bool) -> bool {
    let prusti_result: bool =
        {
            ::prusti_contracts::forall((),
                #[prusti::spec_only] |b: bool| -> bool { a == b })
        };
    prusti_result
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::pred_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn pred1(a: bool) -> bool {
    {
        ::core::panicking::panic_fmt(format_args!("not implemented: {0}",
                format_args!("predicate")));
    }
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_use_pred1_$(NUM_UUID)() -> bool {
    let prusti_result: bool = pred1(true);
    prusti_result
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn use_pred1() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pred_item_pred2_$(NUM_UUID)(a: bool) -> bool {
    let prusti_result: bool =
        {
            ::prusti_contracts::exists((),
                #[prusti::spec_only] |b: bool| -> bool { a == b })
        };
    prusti_result
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::pred_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn pred2(a: bool) -> bool {
    {
        ::core::panicking::panic_fmt(format_args!("not implemented: {0}",
                format_args!("predicate")));
    }
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_use_pred2_$(NUM_UUID)() -> bool {
    let prusti_result: bool = pred2(true);
    prusti_result
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn use_pred2() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pred_item_forall_implication_$(NUM_UUID)()
    -> bool {
    let prusti_result: bool =
        {
            ::prusti_contracts::forall((),
                #[prusti::spec_only] |x: usize| -> bool
                    {
                        if ((x != 0)) {
                                let rhs: bool = (x * 2 != 0);
                                rhs
                            } else { true }
                    })
        };
    prusti_result
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::pred_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn forall_implication() -> bool {
    {
        ::core::panicking::panic_fmt(format_args!("not implemented: {0}",
                format_args!("predicate")));
    }
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pred_item_exists_implication_$(NUM_UUID)()
    -> bool {
    let prusti_result: bool =
        {
            ::prusti_contracts::exists((),
                #[prusti::spec_only] |x: usize| -> bool
                    {
                        if ((x != 0)) {
                                let rhs: bool = (x * 2 != 0);
                                rhs
                            } else { true }
                    })
        };
    prusti_result
}
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::pred_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn exists_implication() -> bool {
    {
        ::core::panicking::panic_fmt(format_args!("not implemented: {0}",
                format_args!("predicate")));
    }
}
fn main() {}
ProcedureSpecification { source: DefId(0:7 ~ predicates[$(CRATE_ID)]::pred1), kind: Inherent(Predicate(Some(DefId(0:5 ~ predicates[$(CRATE_ID)]::prusti_pred_item_pred1_$(NUM_UUID))))), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:12 ~ predicates[$(CRATE_ID)]::pred2), kind: Inherent(Predicate(Some(DefId(0:10 ~ predicates[$(CRATE_ID)]::prusti_pred_item_pred2_$(NUM_UUID))))), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:9 ~ predicates[$(CRATE_ID)]::use_pred1), kind: Inherent(Impure), pres: Inherent([DefId(0:8 ~ predicates[$(CRATE_ID)]::prusti_pre_item_use_pred1_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:14 ~ predicates[$(CRATE_ID)]::use_pred2), kind: Inherent(Impure), pres: Inherent([DefId(0:13 ~ predicates[$(CRATE_ID)]::prusti_pre_item_use_pred2_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:17 ~ predicates[$(CRATE_ID)]::forall_implication), kind: Inherent(Predicate(Some(DefId(0:15 ~ predicates[$(CRATE_ID)]::prusti_pred_item_forall_implication_$(NUM_UUID))))), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:20 ~ predicates[$(CRATE_ID)]::exists_implication), kind: Inherent(Predicate(Some(DefId(0:18 ~ predicates[$(CRATE_ID)]::prusti_pred_item_exists_implication_$(NUM_UUID))))), pres: Empty, posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
