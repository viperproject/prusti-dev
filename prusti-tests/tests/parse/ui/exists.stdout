// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"








#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Exists/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}},[]]}}"]
fn prusti_pre_item_test3_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || -> bool { a + a == a + a };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test3() { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Exists/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":2},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}},[]]}}"]
fn prusti_pre_item_test4_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32, b: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || -> bool { (a + b == a + b && true) == (a + b == a + b) };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test4() { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Exists/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":2},{/"kind/":{/"Implies/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":102}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":103}}}]}},[]]}}"]
fn prusti_pre_item_test5_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32, b: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || -> bool { a + b == a + b };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || -> bool { a + b == a + b };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test5() { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Exists/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":1},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":104}}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102},{/"spec_id/":/"$(UUID)/",/"expr_id/":103}]]]}}"]
fn prusti_pre_item_test8_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_104"]
            || -> bool { a + a == a + a };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { 1 };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || { 2 == 2 && true };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test8() { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Exists/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":2},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":105}}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102},{/"spec_id/":/"$(UUID)/",/"expr_id/":103}],[{/"spec_id/":/"$(UUID)/",/"expr_id/":104}]]]}}"]
fn prusti_pre_item_test9_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32, b: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_105"]
            || -> bool { a + b == a + b };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { 1 };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || { 2 };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_104"]
            || { 1 };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test9() { }
#[allow(unused_must_use, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Exists/":[{/"spec_id/":/"$(UUID)/",/"expr_id/":101,/"count/":2},{/"kind/":{/"Implies/":[{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":108}}},{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":109}}}]}},[[{/"spec_id/":/"$(UUID)/",/"expr_id/":102},{/"spec_id/":/"$(UUID)/",/"expr_id/":103},{/"spec_id/":/"$(UUID)/",/"expr_id/":104}],[{/"spec_id/":/"$(UUID)/",/"expr_id/":105},{/"spec_id/":/"$(UUID)/",/"expr_id/":106}],[{/"spec_id/":/"$(UUID)/",/"expr_id/":107}]]]}}"]
fn prusti_pre_item_test10_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    |a: i32, b: i32|
        {

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_108"]
            || -> bool { a + b == a + b };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_109"]
            || -> bool { a + b == a + b };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_102"]
            || { 1 };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_103"]
            || { 2 };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_104"]
            || { 3 };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_105"]
            || { 1 };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_106"]
            || { 2 };

            #[prusti::spec_only]
            #[prusti::expr_id = "$(NUM_UUID)_107"]
            || { 1 };
        };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test10() { }
fn main() { }
Procedure(ProcedureSpecification { pres: [Assertion { kind: Exists(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32)] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:7 ~ exists[$(CRATE_ID)]::prusti_pre_item_test3_$(NUM_UUID)::{closure#0}::{closure#0}) }) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Exists(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32), (_3, i32)] }, TriggerSet([]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:11 ~ exists[$(CRATE_ID)]::prusti_pre_item_test4_$(NUM_UUID)::{closure#0}::{closure#0}) }) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Exists(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32), (_3, i32)] }, TriggerSet([]), Assertion { kind: Implies(Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:15 ~ exists[$(CRATE_ID)]::prusti_pre_item_test5_$(NUM_UUID)::{closure#0}::{closure#0}) }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: DefId(0:16 ~ exists[$(CRATE_ID)]::prusti_pre_item_test5_$(NUM_UUID)::{closure#0}::{closure#1}) }) }) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Exists(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32)] }, TriggerSet([Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:21 ~ exists[$(CRATE_ID)]::prusti_pre_item_test8_$(NUM_UUID)::{closure#0}::{closure#1}) }, Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: DefId(0:22 ~ exists[$(CRATE_ID)]::prusti_pre_item_test8_$(NUM_UUID)::{closure#0}::{closure#2}) }])]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: DefId(0:20 ~ exists[$(CRATE_ID)]::prusti_pre_item_test8_$(NUM_UUID)::{closure#0}::{closure#0}) }) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Exists(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32), (_3, i32)] }, TriggerSet([Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:27 ~ exists[$(CRATE_ID)]::prusti_pre_item_test9_$(NUM_UUID)::{closure#0}::{closure#1}) }, Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: DefId(0:28 ~ exists[$(CRATE_ID)]::prusti_pre_item_test9_$(NUM_UUID)::{closure#0}::{closure#2}) }]), Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: DefId(0:29 ~ exists[$(CRATE_ID)]::prusti_pre_item_test9_$(NUM_UUID)::{closure#0}::{closure#3}) }])]), Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(105), expr: DefId(0:26 ~ exists[$(CRATE_ID)]::prusti_pre_item_test9_$(NUM_UUID)::{closure#0}::{closure#0}) }) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [Assertion { kind: Exists(QuantifierVars { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), vars: [(_2, i32), (_3, i32)] }, TriggerSet([Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(102), expr: DefId(0:35 ~ exists[$(CRATE_ID)]::prusti_pre_item_test10_$(NUM_UUID)::{closure#0}::{closure#2}) }, Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(103), expr: DefId(0:36 ~ exists[$(CRATE_ID)]::prusti_pre_item_test10_$(NUM_UUID)::{closure#0}::{closure#3}) }, Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(104), expr: DefId(0:37 ~ exists[$(CRATE_ID)]::prusti_pre_item_test10_$(NUM_UUID)::{closure#0}::{closure#4}) }]), Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(105), expr: DefId(0:38 ~ exists[$(CRATE_ID)]::prusti_pre_item_test10_$(NUM_UUID)::{closure#0}::{closure#5}) }, Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(106), expr: DefId(0:39 ~ exists[$(CRATE_ID)]::prusti_pre_item_test10_$(NUM_UUID)::{closure#0}::{closure#6}) }]), Trigger([Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(107), expr: DefId(0:40 ~ exists[$(CRATE_ID)]::prusti_pre_item_test10_$(NUM_UUID)::{closure#0}::{closure#7}) }])]), Assertion { kind: Implies(Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(108), expr: DefId(0:33 ~ exists[$(CRATE_ID)]::prusti_pre_item_test10_$(NUM_UUID)::{closure#0}::{closure#0}) }) }, Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(109), expr: DefId(0:34 ~ exists[$(CRATE_ID)]::prusti_pre_item_test10_$(NUM_UUID)::{closure#0}::{closure#1}) }) }) }) }], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
