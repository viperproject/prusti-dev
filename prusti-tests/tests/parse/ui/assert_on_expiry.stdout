// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"
// normalize-stdout-test: "#/[prusti::specs_version = /x22.+/x22/]" -> "#[prusti::specs_version = $(SPECS_VERSION)]"






#![feature(type_ascription)]
#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pledge_item_test1_$(NUM_UUID)(a: bool,
    result: ()) -> bool {
    !!((true): bool)
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pledge_item_test1_$(NUM_UUID)(a: bool,
    result: ()) -> bool {
    !!((a): bool)
}
#[prusti::assert_pledge_spec_id_ref_lhs = "$(NUM_UUID)"]
#[prusti::assert_pledge_spec_id_ref_rhs = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test1(a: bool) {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pledge_item_test2_$(NUM_UUID)(a: bool,
    result: ()) -> bool {
    !!((true): bool)
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pledge_item_test2_$(NUM_UUID)(a: bool,
    result: ()) -> bool {
    !!((a): bool)
}
#[prusti::assert_pledge_spec_id_ref_lhs = "$(NUM_UUID)"]
#[prusti::assert_pledge_spec_id_ref_rhs = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test2(a: bool) {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pledge_item_test3_$(NUM_UUID)(x: u32,
    result: u32) -> bool {
    !!((true): bool)
}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code,
non_snake_case)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pledge_item_test3_$(NUM_UUID)(x: u32,
    result: u32) -> bool {
    !!((result == match x { 1 => 1, 2 => 2, _ => 0, }): bool)
}
#[prusti::assert_pledge_spec_id_ref_lhs = "$(NUM_UUID)"]
#[prusti::assert_pledge_spec_id_ref_rhs = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test3(x: u32) -> u32 { 1 }
fn main() {}
ProcedureSpecification { source: DefId(0:7 ~ assert_on_expiry[$(CRATE_ID)]::test1), kind: Inherent(Impure), pres: Empty, posts: Empty, pledges: Inherent([Pledge { reference: None, lhs: Some(DefId(0:5 ~ assert_on_expiry[$(CRATE_ID)]::prusti_pledge_item_test1_$(NUM_UUID))), rhs: DefId(0:6 ~ assert_on_expiry[$(CRATE_ID)]::prusti_pledge_item_test1_$(NUM_UUID)) }]), trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:10 ~ assert_on_expiry[$(CRATE_ID)]::test2), kind: Inherent(Impure), pres: Empty, posts: Empty, pledges: Inherent([Pledge { reference: None, lhs: Some(DefId(0:8 ~ assert_on_expiry[$(CRATE_ID)]::prusti_pledge_item_test2_$(NUM_UUID))), rhs: DefId(0:9 ~ assert_on_expiry[$(CRATE_ID)]::prusti_pledge_item_test2_$(NUM_UUID)) }]), trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:13 ~ assert_on_expiry[$(CRATE_ID)]::test3), kind: Inherent(Impure), pres: Empty, posts: Empty, pledges: Inherent([Pledge { reference: None, lhs: Some(DefId(0:11 ~ assert_on_expiry[$(CRATE_ID)]::prusti_pledge_item_test3_$(NUM_UUID))), rhs: DefId(0:12 ~ assert_on_expiry[$(CRATE_ID)]::prusti_pledge_item_test3_$(NUM_UUID)) }]), trusted: Inherent(false), terminates: Inherent(None) }
