// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"
// normalize-stdout-test: "#/[prusti::specs_version = /x22.+/x22/]" -> "#[prusti::specs_version = $(SPECS_VERSION)]"












#![feature(type_ascription)]
#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test1_$(NUM_UUID)() -> bool {
    !!((!(true) || (true)): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test1() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test2_$(NUM_UUID)() -> bool {
    !!((!(true) || (!(true) || (true))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test2() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test3_$(NUM_UUID)() -> bool {
    !!((!(true) || ((!(true) || (true)))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test3() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test4_$(NUM_UUID)() -> bool {
    !!((!((!(true) || (true))) || (true)): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test4() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test5_$(NUM_UUID)() -> bool {
    !!((!((!(true) || (true))) || ((!(true) || (true)))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test5() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test21_$(NUM_UUID)() -> bool {
    !!((!(true) || (true)): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test21() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test22_$(NUM_UUID)() -> bool {
    !!((!(true) || (!(true) || (true))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test22() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test23_$(NUM_UUID)() -> bool {
    !!((!(true) || ((!(true) || (true)))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test23() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test24_$(NUM_UUID)() -> bool {
    !!((!((!(true) || (true))) || (true)): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test24() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test25_$(NUM_UUID)() -> bool {
    !!((!((!(true) || (true))) || ((!(true) || (true)))): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test25() {}
fn main() {}
ProcedureSpecification { source: DefId(0:6 ~ implies[$(CRATE_ID)]::test1), kind: Inherent(Impure), pres: Inherent([DefId(0:5 ~ implies[$(CRATE_ID)]::prusti_pre_item_test1_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:8 ~ implies[$(CRATE_ID)]::test2), kind: Inherent(Impure), pres: Inherent([DefId(0:7 ~ implies[$(CRATE_ID)]::prusti_pre_item_test2_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:10 ~ implies[$(CRATE_ID)]::test3), kind: Inherent(Impure), pres: Inherent([DefId(0:9 ~ implies[$(CRATE_ID)]::prusti_pre_item_test3_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:12 ~ implies[$(CRATE_ID)]::test4), kind: Inherent(Impure), pres: Inherent([DefId(0:11 ~ implies[$(CRATE_ID)]::prusti_pre_item_test4_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:14 ~ implies[$(CRATE_ID)]::test5), kind: Inherent(Impure), pres: Inherent([DefId(0:13 ~ implies[$(CRATE_ID)]::prusti_pre_item_test5_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:16 ~ implies[$(CRATE_ID)]::test21), kind: Inherent(Impure), pres: Inherent([DefId(0:15 ~ implies[$(CRATE_ID)]::prusti_pre_item_test21_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:18 ~ implies[$(CRATE_ID)]::test22), kind: Inherent(Impure), pres: Inherent([DefId(0:17 ~ implies[$(CRATE_ID)]::prusti_pre_item_test22_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:20 ~ implies[$(CRATE_ID)]::test23), kind: Inherent(Impure), pres: Inherent([DefId(0:19 ~ implies[$(CRATE_ID)]::prusti_pre_item_test23_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:22 ~ implies[$(CRATE_ID)]::test24), kind: Inherent(Impure), pres: Inherent([DefId(0:21 ~ implies[$(CRATE_ID)]::prusti_pre_item_test24_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
ProcedureSpecification { source: DefId(0:24 ~ implies[$(CRATE_ID)]::test25), kind: Inherent(Impure), pres: Inherent([DefId(0:23 ~ implies[$(CRATE_ID)]::prusti_pre_item_test25_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None), purity: Inherent(None) }
