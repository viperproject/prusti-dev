// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"
// normalize-stdout-test: "#/[prusti::specs_version = /x22.+/x22/]" -> "#[prusti::specs_version = $(SPECS_VERSION)]"








#![feature(type_ascription)]
#![feature(stmt_expr_attributes)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test1_$(NUM_UUID)() -> bool {
    !!((forall((),
                            #[prusti::spec_only] |a: i32| -> bool
                                { (((a + a == a + a)): bool) })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test1() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test2_$(NUM_UUID)() -> bool {
    !!((forall((),
                            #[prusti::spec_only] |a: i32, b: i32| -> bool
                                {
                                    (((a + b == a + b && true) == (a + b == a + b)): bool)
                                })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test2() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test3_$(NUM_UUID)() -> bool {
    !!((forall((),
                            #[prusti::spec_only] |a: i32, b: i32| -> bool
                                { (((!(a + b == a + b) || (a + b == a + b))): bool) })):
                    bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test3() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test4_$(NUM_UUID)() -> bool {
    !!((forall(((#[prusti::spec_only] |a: i32| (1),
                                    #[prusti::spec_only] |a: i32| (2 == 2 && true)),),
                            #[prusti::spec_only] |a: i32| -> bool
                                { ((a + a == a + a): bool) })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test4() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test5_$(NUM_UUID)() -> bool {
    !!((forall(((#[prusti::spec_only] |a: i32, b: i32| (1),
                                    #[prusti::spec_only] |a: i32, b: i32| (2)),
                                (#[prusti::spec_only] |a: i32, b: i32| (1),)),
                            #[prusti::spec_only] |a: i32, b: i32| -> bool
                                { ((a + b == a + b): bool) })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test5() {}
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test6_$(NUM_UUID)() -> bool {
    !!((forall(((#[prusti::spec_only] |a: i32, b: i32| (1),
                                    #[prusti::spec_only] |a: i32, b: i32| (2),
                                    #[prusti::spec_only] |a: i32, b: i32| (3)),
                                (#[prusti::spec_only] |a: i32, b: i32| (1),
                                    #[prusti::spec_only] |a: i32, b: i32| (2)),
                                (#[prusti::spec_only] |a: i32, b: i32| (1),)),
                            #[prusti::spec_only] |a: i32, b: i32| -> bool
                                { (((!(a + b == a + b) || (a + b == a + b))): bool) })):
                    bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::specs_version = $(SPECS_VERSION)]
fn test6() {}
fn main() {}
ProcedureSpecification { source: DefId(0:7 ~ forall[$(CRATE_ID)]::test1), kind: Inherent(Impure), pres: Inherent([DefId(0:5 ~ forall[$(CRATE_ID)]::prusti_pre_item_test1_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:10 ~ forall[$(CRATE_ID)]::test2), kind: Inherent(Impure), pres: Inherent([DefId(0:8 ~ forall[$(CRATE_ID)]::prusti_pre_item_test2_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:13 ~ forall[$(CRATE_ID)]::test3), kind: Inherent(Impure), pres: Inherent([DefId(0:11 ~ forall[$(CRATE_ID)]::prusti_pre_item_test3_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:18 ~ forall[$(CRATE_ID)]::test4), kind: Inherent(Impure), pres: Inherent([DefId(0:14 ~ forall[$(CRATE_ID)]::prusti_pre_item_test4_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:24 ~ forall[$(CRATE_ID)]::test5), kind: Inherent(Impure), pres: Inherent([DefId(0:19 ~ forall[$(CRATE_ID)]::prusti_pre_item_test5_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
ProcedureSpecification { source: DefId(0:33 ~ forall[$(CRATE_ID)]::test6), kind: Inherent(Impure), pres: Inherent([DefId(0:25 ~ forall[$(CRATE_ID)]::prusti_pre_item_test6_$(NUM_UUID))]), posts: Empty, pledges: Empty, trusted: Inherent(false), terminates: Inherent(None) }
